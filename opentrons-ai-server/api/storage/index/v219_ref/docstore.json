{"docstore/metadata": {"72beb569-fa7f-4009-b23c-0fb3773bbc37": {"doc_hash": "2a1faac7d8909d6a3797f9450c2c0e45ccdc60ad684054b28ed729835548bdb7"}, "5ac5dd00-55bc-4767-8291-4b198eba6fd9": {"doc_hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac"}, "130dd014-0595-4e8d-bce0-9a555e767c16": {"doc_hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d"}, "6e886adb-3bfa-459f-858e-dcd0ae10efb2": {"doc_hash": "bd6ca8ff0fc99626577d4ad165d7a337317d507e5e03b4866ac80d41287acb9c"}, "3856fcb1-a47f-4a47-9bf2-2f196e6f957b": {"doc_hash": "1c1cc4587acf18b019b5844977db36b69c5a907670d876fcedaf089eb01d3ff8"}, "54a40460-23c1-40da-9886-7a91b4163ebf": {"doc_hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072"}, "045c8692-adb9-4d07-9f25-d3de0a01baba": {"doc_hash": "a47e88cbd9eef3664a84e2bd78ed8fa085a79f0bac528e4025c0d4f843134a97"}, "b0b7d054-9b6a-456d-a0f2-129ceb7e8499": {"doc_hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08"}, "54d007e0-a439-4299-a911-d7d93df8f0ad": {"doc_hash": "62ef379673e52a18f7f5f9b73c1c4ec344402026a94f15dc20949519c5bb5b26", "ref_doc_id": "72beb569-fa7f-4009-b23c-0fb3773bbc37"}, "995cafc5-6e39-43bb-a23b-48d135fc5687": {"doc_hash": "76be1894148a4d3dcec399a756ffbd59bebfa203289b9dbd4bd2dbc642549bf1", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0": {"doc_hash": "0a8050ff3d108c276f226d7997f4123da263327dbebf787eb93275edbb4adc90", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "507eee74-04d1-421e-8f63-8a7ad4dede7a": {"doc_hash": "47a8998b029d51f695f4f35bf7e5b19af7255fe8ed0ddb4056377f6937c5dea0", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "9cd46042-f358-4a40-81c6-18aee50f8df3": {"doc_hash": "46513cbcfb61a131d93d2dc72892a662dd1b4d5a420cd6855933a00983dba221", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "c808470e-fa8e-4aa1-9392-29e5e6d56841": {"doc_hash": "ee779495a022b075b90b4bfd1dc6370be1549a36ab6397cbed7980b18f00e068", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "20d7b474-fffe-481a-a28d-3393a60f7c3d": {"doc_hash": "96983910b652d196239e44949ab1d8279ade7e036899e41dd91678e7c37b9e78", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "0c611f55-b589-4106-a22b-8cc7087cd72c": {"doc_hash": "aaa282b91645baf18ee982a5709a20503db5f63fc226c9765e385638c3cd2149", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "aaae4fe6-132e-47cf-8ebf-f923ede94684": {"doc_hash": "78f2e0d66044be033536186ce18e13b76d3cc2a791c6775e3f2964e906452813", "ref_doc_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9"}, "4812c02a-deae-4617-a631-3d1d2681ef6d": {"doc_hash": "90de27aa0ca488afe481112141b0a5f33a6dd4347558c32adb41d7f82af27161", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "cfcb4e69-2296-491c-b649-15e9377ac385": {"doc_hash": "54dc6fb3ae53080f266a1eb6827bb890924955ed6bb9bd1dc80ca3387befc5ba", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "c94276a9-98a1-4349-84d0-b78b5e8d1b7e": {"doc_hash": "ee3d17cdaee944f9ec4e860d64648da04b3c57c0dcb592db214deb1fa97002d7", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "59145c5f-26e2-4613-8df5-e10874e81f20": {"doc_hash": "b0a97b4c4231ebffc1a7a40e89b73e18724255351cbf3ca9c1a7f915b7dbe3a9", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "99a604e4-a110-4600-b68b-b11b0ad3538f": {"doc_hash": "17876b18379a8c2d05505aed5e57c91dd1cac0ec4a56950c036ed35543a07276", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "433118a8-4031-4aaf-bbdc-e0965f79997e": {"doc_hash": "14cf2af61e50ea8e3d7c43c5a8bcf9ca76d4fb3de58dbf94066c1009f4df6a77", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4": {"doc_hash": "d2d480a388e99d2b8c683b44086e9b348b5d295fee7518f79ecffe9f6e7e18e2", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "ee7b7752-6013-4fc6-90c6-cb1559acf82a": {"doc_hash": "16a4dad093331449e6c90fff5977584feedc93f228a482b59a88cd897caa70ea", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "a4c2e637-bf95-40cb-b4de-78de8b49b6b9": {"doc_hash": "6068e8d42e7a824307b827c994e6e6b7a5e9984521b9f3ca0c33a04f15080f45", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "ebe419bd-5a6e-41f3-8c29-1522cbb5495b": {"doc_hash": "958839c2d3a5489f613693566dbe3df494e791d93e43035201e87d7a73447373", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "1abdb350-e5f4-4c81-942a-1105d3053d74": {"doc_hash": "e4bcdb1b61e2bf23454b397fa6b8f0fd51df7fa9a70e2eadbd6abdbdec979ba2", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "f3b48282-6282-4419-9b67-287f8516f532": {"doc_hash": "52ae97c6421f0dc1c461a7f8cb30371442de67fda5f231a0f6ef6f5841c6ec1e", "ref_doc_id": "130dd014-0595-4e8d-bce0-9a555e767c16"}, "55820e72-350c-4d01-97be-cdc60036974a": {"doc_hash": "ec7b63f3f36a4c900b190e5b77a0a4490e7caa03d035746f035dd69536aaf5b8", "ref_doc_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2"}, "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee": {"doc_hash": "21af4b40cc382dce449d62763440b214c2c3dd8e8e15d73072beab26db6f18c5", "ref_doc_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2"}, "c5a03af5-c467-47c4-96ff-3b15682d23bf": {"doc_hash": "b6b448890e43f5eff876bc01a3f2d65c24bbd6b3c77e38345d1b05b5ae725776", "ref_doc_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2"}, "112f62c0-766e-43c9-ace3-b96969d9fadb": {"doc_hash": "cfe448da292a971d78adc452f81fca3439c63d80eb274b10d98e53b333121775", "ref_doc_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2"}, "e39682ef-e478-472e-8f0e-da1ed1b619f8": {"doc_hash": "37b3cb2a0fbf7a84b489cca9326d792b547a0413c733f77d10091c151d44ff3c", "ref_doc_id": "3856fcb1-a47f-4a47-9bf2-2f196e6f957b"}, "4e40803c-97a9-4b13-8bd8-aaa8a7840760": {"doc_hash": "b4e637460cee18f6a8d7c6eb24e9ed7a49a65e002ffb8e8769264ad3e80f70c9", "ref_doc_id": "3856fcb1-a47f-4a47-9bf2-2f196e6f957b"}, "f1cf7a8c-2071-4d9a-a0bb-f6b3664fb968": {"doc_hash": "845bd61174299cb429fcab3b34066fdd566bcd980c21bdade22aca00ea0dedf6", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "527cc4e9-d27e-46b1-9faf-1052b2b76ba0": {"doc_hash": "d201d132f050ac538b6274c529671cdc54022b80e155068b3a5ef274541bab02", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "33a52153-0b96-43ff-a3fc-bc2546b70869": {"doc_hash": "5afec27c4f201f14217a4865b18311fe717693348c26f9c3cd3a901d021ff9c5", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "56eec31c-5c40-416e-81fd-7c7a6722f005": {"doc_hash": "ab99552145816f7d8d8596a43c16493b4e2e7e434d70ce598aa8b51b8be07ab8", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3": {"doc_hash": "0a0cc3bd0a2f7151ad743361a1163578790a24c46f3fc576c80d640286f77e0e", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "98338da6-5a0a-4653-89be-314b1cc2ff25": {"doc_hash": "31bd27fe1bb990c4105354d53c4334dea2eb18c4e1f7ccda5f0a13cf04517e63", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "515d7962-e18d-4b3d-8b44-345f171c1de2": {"doc_hash": "c03ff33e0ea04de25bb721187fa04501d3588be97ffb706d83a6d0b59483732a", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "1062af75-9e40-499f-9e34-18c8074da7a8": {"doc_hash": "e550c65a5a23af01c46f207a498d836e7fd16f94d5380e6394fc70f583411618", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "e559f16b-b79d-497c-83c3-1040b7290ab2": {"doc_hash": "e52c36f58e0959a58a31f3a7a24b5e9aaacf63cc4b56423b3cd4f1e3fb680693", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "fe0c19af-46e7-46d9-8fd6-66508ffc9f88": {"doc_hash": "4ceb7790b37ced4928f25cd0711f1eaaa3420f03b30330016c8c7cb5738fdffb", "ref_doc_id": "54a40460-23c1-40da-9886-7a91b4163ebf"}, "08bcf1d4-3919-4d0d-8c25-64cb6cd0f6ff": {"doc_hash": "58b0bddc5c76f72dde6a3f54c951fea6cb9118a2ef913da589ae0afcee15bb41", "ref_doc_id": "045c8692-adb9-4d07-9f25-d3de0a01baba"}, "a33c36a6-48b6-48a9-b522-e5205e1c4b8c": {"doc_hash": "3e864d46c40cd3a4b185d3d6caf47a3c8fe2dc9a4c94965f65075affd0fa36f5", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}, "f0b68f74-cf73-4de3-87e3-80446f9a99d8": {"doc_hash": "068930d37db63e0e4a5f8b23bd15cedf2b14bd842c7c16be456d4d406b0fe032", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}, "6f062ef9-2a08-4252-bfea-e3a6fec7ea21": {"doc_hash": "7db3fdb5a82b7cfcd40d7d81a33c99b8df1ed5543ca65330172cc7c3a5fd57fb", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}, "d38702d2-d706-43ce-8e66-ad161eeafb07": {"doc_hash": "a743d4008c1555ad62b06cc8c7059fdcec89c464baf51f38dc403dedc06dece0", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}, "1fae385d-2f54-4dee-b18c-3b31945b956d": {"doc_hash": "d9b8cf738542bb99d872d9b004d8df61b7bc8ff0635475d2878bc61f97e0cf46", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}, "465eac93-e005-49d0-8601-0352a21c45ed": {"doc_hash": "4f5eba44aa5e0594a6d44a6e8f4a8aefa5dacbf247ffe80759973a78175af236", "ref_doc_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499"}}, "docstore/data": {"54d007e0-a439-4299-a911-d7d93df8f0ad": {"__data__": {"id_": "54d007e0-a439-4299-a911-d7d93df8f0ad", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72beb569-fa7f-4009-b23c-0fb3773bbc37", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "2a1faac7d8909d6a3797f9450c2c0e45ccdc60ad684054b28ed729835548bdb7", "class_name": "RelatedNodeInfo"}}, "text": "API Version 2 Reference", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 25, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "995cafc5-6e39-43bb-a23b-48d135fc5687": {"__data__": {"id_": "995cafc5-6e39-43bb-a23b-48d135fc5687", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0", "node_type": "1", "metadata": {}, "hash": "cc98f4abc4644aff389d81c6478a724227f0ff9b232a5bd150280ecf800bb960", "class_name": "RelatedNodeInfo"}}, "text": "Protocols\n\n_class_ opentrons.protocol*api.ProtocolContext(\\_api_version: APIVersion*, _core: AbstractProtocol\\AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _broker: [Optional')\\LegacyBroker] \\= None_, _core_map: [Optional')\\LoadedCoreMap] \\= None_, _deck: [Optional')\\Deck] \\= None_, _bundled_data: [Optional')\\[Dict')\\[str'), bytes')]] \\= None_)\nA context for the state of a protocol.\n\nThe `ProtocolContext` class provides the objects, attributes, and methods that\nallow you to configure and control the protocol.\n\nMethods generally fall into one of two categories.\n\n> - They can change the state of the `ProtocolContext` object, such as adding\n>   pipettes, hardware modules, or labware to your protocol.\n> - They can control the flow of a running protocol, such as pausing, displaying\n>   messages, or controlling built\\-in robot hardware like the ambient lighting.\n\nDo not instantiate a `ProtocolContext` directly.\nThe `run()` function of your protocol does that for you.\nSee the Tutorial for more information.\n\nUse `opentrons.execute.get_protocol_api()` to instantiate a `ProtocolContext` when\nusing Jupyter Notebook. See Advanced Control.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\nReturn the API version specified for this protocol context.\n\nThis value is set when the protocol context\nis initialized.\n\n> - When the context is the argument of `run()`, the `\"apiLevel\"` key of the\n>   metadata or requirements dictionary determines `api_version`.\n> - When the context is instantiated with\n>   `opentrons.execute.get_protocol_api()` or\n>   `opentrons.simulate.get_protocol_api()`, the value of its `version`\n>   argument determines `api_version`.\n\nIt may be lower than the maximum version supported by the\nrobot software, which is accessible via the\n`protocol_api.MAX_SUPPORTED_VERSION` constant.\n\nNew in version 2\\.0\\.\n\n_property_ bundled_data*: Dict')\\[str'), bytes')]*\nAccessor for data files bundled with this protocol, if any.\n\nThis is a dictionary mapping the filenames of bundled datafiles to their\ncontents. The filename keys are formatted with extensions but without paths. For\nexample, a file stored in the bundle as `data/mydata/aspirations.csv` will\nhave the key `\"aspirations.csv\"`. The values are `bytes`') objects\nrepresenting the contents of the files.\n\nNew in version 2\\.0\\.\n\ncommands(_self_) \u2192 'List\\[str]'\nReturn the run log.\n\nThis is a list of human\\-readable strings representing what\u2019s been done in the protocol so\nfar. For example, \u201cAspirating 123 \u00b5L from well A1 of 96 well plate in slot 1\\.\u201d\n\nThe exact format of these entries is not guaranteed. The format here may differ from other\nplaces that show the run log, such as the Opentrons App or touchscreen.\n\nNew in version 2\\.0\\.\n\ncomment(_self_, _msg: 'str'_) \u2192 'None'\nAdd a user\\-readable message to the run log.\n\nThe message is visible anywhere you can view the run log, including the Opentrons App and the touchscreen on Flex.\n\nNote\n\nThe value of the message is computed during protocol analysis,\nso `comment()` can\u2019t communicate real\\-time information during the\nactual protocol run.\n\nNew in version 2\\.0\\.\n\n_property_ deck*: Deck*\nAn interface to provide information about what\u2019s currently loaded on the deck.\nThis object is useful for determining if a slot on the deck is free.\n\nThis object behaves like a dictionary whose keys are the deck slot names.\nFor instance, `deck[1]`, `deck[\"1\"]`, and `deck[\"D1\"]`\nwill all return the object loaded in the front\\-left slot.\n\nThe value for each key depends on what is loaded in the slot:\\* A `Labware` if the slot contains a labware.\n\n- A module context if the slot contains a hardware module.\n- `None` if the slot doesn\u2019t contain anything.\n\nA module that occupies multiple slots is set as the value for all of the\nrelevant slots. Currently, the only multiple\\-slot module is the Thermocycler.\nWhen loaded, the `ThermocyclerContext` object is the value for\n`deck` keys `\"A1\"` and `\"B1\"` on Flex, and `7`, `8`, `10`, and\n`11` on OT\\-2\\.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4034, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0": {"__data__": {"id_": "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "995cafc5-6e39-43bb-a23b-48d135fc5687", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "76be1894148a4d3dcec399a756ffbd59bebfa203289b9dbd4bd2dbc642549bf1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "507eee74-04d1-421e-8f63-8a7ad4dede7a", "node_type": "1", "metadata": {}, "hash": "5884802f151f7ef74a6cc6f8a75398f33793f375b58d7f2d589c5dc5819129c7", "class_name": "RelatedNodeInfo"}}, "text": "This object behaves like a dictionary whose keys are the deck slot names.\nFor instance, `deck[1]`, `deck[\"1\"]`, and `deck[\"D1\"]`\nwill all return the object loaded in the front\\-left slot.\n\nThe value for each key depends on what is loaded in the slot:\\* A `Labware` if the slot contains a labware.\n\n- A module context if the slot contains a hardware module.\n- `None` if the slot doesn\u2019t contain anything.\n\nA module that occupies multiple slots is set as the value for all of the\nrelevant slots. Currently, the only multiple\\-slot module is the Thermocycler.\nWhen loaded, the `ThermocyclerContext` object is the value for\n`deck` keys `\"A1\"` and `\"B1\"` on Flex, and `7`, `8`, `10`, and\n`11` on OT\\-2\\. In API version 2\\.13 and earlier, only slot 7 keyed to the\nThermocycler object, and slots 8, 10, and 11 keyed to `None`.\n\nRather than filtering the objects in the deck map yourself,\nyou can also use `loaded_labwares` to get a dict of labwares\nand `loaded_modules` to get a dict of modules.\n\nFor Advanced Control _only_, you can delete an element of the `deck` dict.\nThis only works for deck slots that contain labware objects. For example, if slot\n1 contains a labware, `del protocol.deck[\"1\"]` will free the slot so you can\nload another labware there.\n\nWarning\n\nDeleting labware from a deck slot does not pause the protocol. Subsequent\ncommands continue immediately. If you need to physically move the labware to\nreflect the new deck state, add a `pause()` or use\n`move_labware()` instead.\n\nChanged in version 2\\.14: Includes the Thermocycler in all of the slots it occupies.\n\nChanged in version 2\\.15: `del` sets the corresponding labware\u2019s location to `OFF_DECK`.\n\nNew in version 2\\.0\\.\n\ndefine*liquid(\\_self*, _name: 'str'_, _description: 'Optional\\[str]'_, _display_color: 'Optional\\[str]'_) \u2192 'Liquid'\nDefine a liquid within a protocol.\n\nParameters:\n\n- **name** (_str_')) \u2013 A human\\-readable name for the liquid.\n- **description** (_str_')) \u2013 An optional description of the liquid.\n- **display_color** (_str_')) \u2013 An optional hex color code, with hash included, to represent the specified liquid. Standard three\\-value, four\\-value, six\\-value, and eight\\-value syntax are all acceptable.\n\nReturns:\nA `Liquid` object representing the specified liquid.\n\nNew in version 2\\.14\\.\n\ndelay(_self_, _seconds: 'float' \\= 0_, _minutes: 'float' \\= 0_, _msg: 'Optional\\[str]' \\= None_) \u2192 'None'\nDelay protocol execution for a specific amount of time.\n\nParameters:\n\n- **seconds** (_float_')) \u2013 The time to delay in seconds.\n- **minutes** (_float_')) \u2013 The time to delay in minutes.\n\nIf both `seconds` and `minutes` are specified, they will be added together.\n\nNew in version 2\\.0\\.\n\n_property_ door_closed*: bool')*\nReturns `True` if the front door of the robot is closed.\n\nNew in version 2\\.5\\.\n\n_property_ fixed_trash*: Union')\\[Labware, TrashBin]*\nThe trash fixed to slot 12 of an OT\\-2\u2019s deck.\n\nIn API version 2\\.15 and earlier, the fixed trash is a `Labware` object with one well. Access it like labware in your protocol. For example, `protocol.fixed_trash[\"A1\"]`.\n\nIn API version 2\\.15 only, Flex protocols have a fixed trash in slot A3\\.\n\nIn API version 2\\.16 and later, the fixed trash only exists in OT\\-2 protocols. It is a `TrashBin` object, which doesn\u2019t have any wells. Trying to access `fixed_trash` in a Flex protocol will raise an error. See Trash Bin for details on using the movable trash in Flex protocols.\n\nChanged in version 2\\.16: Returns a `TrashBin` object.\n\nNew in version 2\\.0\\.\n\nhome(_self_) \u2192 'None'\nHome the movement system of the robot.\n\nNew in version 2\\.0\\.\n\nis*simulating(\\_self*) \u2192 'bool'\nReturns `True` if the protocol is running in simulation.", "mimetype": "text/plain", "start_char_idx": 3336, "end_char_idx": 7007, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "507eee74-04d1-421e-8f63-8a7ad4dede7a": {"__data__": {"id_": "507eee74-04d1-421e-8f63-8a7ad4dede7a", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "0a8050ff3d108c276f226d7997f4123da263327dbebf787eb93275edbb4adc90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cd46042-f358-4a40-81c6-18aee50f8df3", "node_type": "1", "metadata": {}, "hash": "33095c7ce77d19ef206ed72e53923146e219d8d0abf3262bd96d946d9af88435", "class_name": "RelatedNodeInfo"}}, "text": "Access it like labware in your protocol. For example, `protocol.fixed_trash[\"A1\"]`.\n\nIn API version 2\\.15 only, Flex protocols have a fixed trash in slot A3\\.\n\nIn API version 2\\.16 and later, the fixed trash only exists in OT\\-2 protocols. It is a `TrashBin` object, which doesn\u2019t have any wells. Trying to access `fixed_trash` in a Flex protocol will raise an error. See Trash Bin for details on using the movable trash in Flex protocols.\n\nChanged in version 2\\.16: Returns a `TrashBin` object.\n\nNew in version 2\\.0\\.\n\nhome(_self_) \u2192 'None'\nHome the movement system of the robot.\n\nNew in version 2\\.0\\.\n\nis*simulating(\\_self*) \u2192 'bool'\nReturns `True` if the protocol is running in simulation.\n\nReturns `False` if the protocol is running on actual hardware.\n\nYou can evaluate the result of this method in an `if` statement to make your\nprotocol behave differently in different environments. For example, you could\nrefer to a data file on your computer when simulating and refer to a data file\nstored on the robot when not simulating.\n\nYou can also use it to skip time\\-consuming aspects of your protocol. Most Python\nProtocol API methods, like `delay()`, are designed to evaluate\ninstantaneously in simulation. But external methods, like those from the\n`time`') module, will run at normal speed if not skipped.\n\nNew in version 2\\.0\\.\n\nload*adapter(\\_self*, _load_name: 'str'_, _location: 'Union\\[DeckLocation, OffDeckType]'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto a location.\n\nFor adapters already defined by Opentrons, this is a convenient way\nto collapse the two stages of adapter initialization (creating\nthe adapter and adding it to the protocol) into one.\n\nThis function returns the created and initialized adapter for use\nlater in the protocol.\n\nParameters:\n\n- **load_name** (_str_')) \u2013 A string to use for looking up a labware definition for the adapter.\n  You can find the `load_name` for any standard adapter on the Opentrons\n  Labware Library.\n- **location** (int or str or `OFF_DECK`) \u2013 Either a deck slot,\n  like `1`, `\"1\"`, or `\"D1\"`, or the special value `OFF_DECK`.\n- **namespace** (_str_')) \u2013 The namespace that the labware definition belongs to.\n  If unspecified, the API will automatically search two namespaces:\n\n> - `\"opentrons\"`, to load standard Opentrons labware definitions.\n>   - `\"custom_beta\"`, to load custom labware definitions created with the\n>     Custom Labware Creator.\n\nYou might need to specify an explicit `namespace` if you have a custom\ndefinition whose `load_name` is the same as an Opentrons standard\ndefinition, and you want to explicitly choose one or the other.\n\n- **version** \u2013 The version of the labware definition. You should normally\n  leave this unspecified to let `load_adapter()` choose a version automatically.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _adapter_def: \"'LabwareDefinition'\"_, _location: 'Union\\[DeckLocation, OffDeckType]'_) \u2192 'Labware'\nSpecify the presence of an adapter on the deck.\n\nThis function loads the adapter definition specified by `adapter_def`\nto the location specified by `location`.\n\nParameters:\n\n- **adapter_def** \u2013 The adapter\u2019s labware definition.\n- **location** (int or str or `OFF_DECK`) \u2013 The slot into which to load the labware,\n  such as `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n\nNew in version 2\\.15\\.\n\nload*instrument(\\_self*, _instrument_name: 'str'_, _mount: 'Union\\[Mount, str, None]' \\= None_, _tip_racks: 'Optional\\[List\\[Labware]]' \\= None_, _replace: 'bool' \\= False_, _liquid_presence_detection: 'Optional\\[bool]' \\= None_) \u2192 'InstrumentContext'\nLoad a specific instrument for use in the protocol.\n\nWhen analyzing the protocol on the robot, instruments loaded with this method\nare compared against the instruments attached to the robot. You won\u2019t be able to\nstart the protocol until the correct instruments are attached and calibrated.\n\nCurrently, this method only loads pipettes.", "mimetype": "text/plain", "start_char_idx": 6314, "end_char_idx": 10283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cd46042-f358-4a40-81c6-18aee50f8df3": {"__data__": {"id_": "9cd46042-f358-4a40-81c6-18aee50f8df3", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "507eee74-04d1-421e-8f63-8a7ad4dede7a", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "47a8998b029d51f695f4f35bf7e5b19af7255fe8ed0ddb4056377f6937c5dea0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c808470e-fa8e-4aa1-9392-29e5e6d56841", "node_type": "1", "metadata": {}, "hash": "7d02222c0fda568edfdd3b030e7781cb4daeba9adf42ca4f34a8662e383bde26", "class_name": "RelatedNodeInfo"}}, "text": "- **location** (int or str or `OFF_DECK`) \u2013 The slot into which to load the labware,\n  such as `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n\nNew in version 2\\.15\\.\n\nload*instrument(\\_self*, _instrument_name: 'str'_, _mount: 'Union\\[Mount, str, None]' \\= None_, _tip_racks: 'Optional\\[List\\[Labware]]' \\= None_, _replace: 'bool' \\= False_, _liquid_presence_detection: 'Optional\\[bool]' \\= None_) \u2192 'InstrumentContext'\nLoad a specific instrument for use in the protocol.\n\nWhen analyzing the protocol on the robot, instruments loaded with this method\nare compared against the instruments attached to the robot. You won\u2019t be able to\nstart the protocol until the correct instruments are attached and calibrated.\n\nCurrently, this method only loads pipettes. You do not need to load the Flex\nGripper to use it in protocols. See Automatic vs Manual Moves.\n\nParameters:\n\n- **instrument_name** (_str_')) \u2013 The instrument to load. See API Load Names\n  for the valid values.\n- **mount** (types.Mount or str or `None`) \u2013 The mount where the instrument should be attached.\n  This can either be an instance of `types.Mount` or one\n  of the strings `\"left\"` or `\"right\"`. When loading a Flex\n  96\\-Channel Pipette (`instrument_name=\"flex_96channel_1000\"`),\n  you can leave this unspecified, since it always occupies both\n  mounts; if you do specify a value, it will be ignored.\n- **tip_racks** (List\\[`Labware`]) \u2013 A list of tip racks from which to pick tips when calling\n  `InstrumentContext.pick_up_tip()` without arguments.\n- **replace** (_bool_')) \u2013 If `True`, replace the currently loaded instrument in\n  `mount`, if any. This is intended for [advanced\n  control](index.html#advanced-control) applications. You cannot\n  replace an instrument in the middle of a protocol being run\n  from the Opentrons App or touchscreen.\n- **liquid_presence_detection** (_bool_')) \u2013 If `True`, enable liquid presence detection for instrument. Only available on Flex robots in API Version 2\\.20 and above.\n\nNew in version 2\\.0\\.\n\nload*labware(\\_self*, _load_name: 'str'_, _location: 'Union\\[DeckLocation, OffDeckType]'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto a location.\n\nFor Opentrons\\-verified labware, this is a convenient way\nto collapse the two stages of labware initialization (creating\nthe labware and adding it to the protocol) into one.\n\nThis function returns the created and initialized labware for use\nlater in the protocol.\n\nParameters:\n\n- **load_name** (_str_')) \u2013 A string to use for looking up a labware definition.\n  You can find the `load_name` for any Opentrons\\-verified labware on the\n  Labware Library.\n- **location** (int or str or `OFF_DECK`) \u2013 Either a deck slot,\n  like `1`, `\"1\"`, or `\"D1\"`, or the special value `OFF_DECK`.\n\nChanged in version 2\\.15: You can now specify a deck slot as a coordinate, like `\"D1\"`.\n\n- **label** (_str_')) \u2013 An optional special name to give the labware. If specified,\n  this is how the labware will appear in the run log, Labware Position\n  Check, and elsewhere in the Opentrons App and on the touchscreen.\n- **namespace** (_str_')) \u2013 The namespace that the labware definition belongs to.\n  If unspecified, the API will automatically search two namespaces:\n\n> - `\"opentrons\"`, to load standard Opentrons labware definitions.\n>   - `\"custom_beta\"`, to load custom labware definitions created with the\n>     Custom Labware Creator.\n\nYou might need to specify an explicit `namespace` if you have a custom\ndefinition whose `load_name` is the same as an Opentrons\\-verified\ndefinition, and you want to explicitly choose one or the other.\n\n- **version** \u2013 The version of the labware definition.", "mimetype": "text/plain", "start_char_idx": 9538, "end_char_idx": 13290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c808470e-fa8e-4aa1-9392-29e5e6d56841": {"__data__": {"id_": "c808470e-fa8e-4aa1-9392-29e5e6d56841", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9cd46042-f358-4a40-81c6-18aee50f8df3", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "46513cbcfb61a131d93d2dc72892a662dd1b4d5a420cd6855933a00983dba221", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20d7b474-fffe-481a-a28d-3393a60f7c3d", "node_type": "1", "metadata": {}, "hash": "fab792abc0227c8b5f93421b8cd06cb4f200db16dd358e2a4f6320a538d68e93", "class_name": "RelatedNodeInfo"}}, "text": "- **label** (_str_')) \u2013 An optional special name to give the labware. If specified,\n  this is how the labware will appear in the run log, Labware Position\n  Check, and elsewhere in the Opentrons App and on the touchscreen.\n- **namespace** (_str_')) \u2013 The namespace that the labware definition belongs to.\n  If unspecified, the API will automatically search two namespaces:\n\n> - `\"opentrons\"`, to load standard Opentrons labware definitions.\n>   - `\"custom_beta\"`, to load custom labware definitions created with the\n>     Custom Labware Creator.\n\nYou might need to specify an explicit `namespace` if you have a custom\ndefinition whose `load_name` is the same as an Opentrons\\-verified\ndefinition, and you want to explicitly choose one or the other.\n\n- **version** \u2013 The version of the labware definition. You should normally\n  leave this unspecified to let `load_labware()` choose a version\n  automatically.\n- **adapter** \u2013 An adapter to load the labware on top of. Accepts the same\n  values as the `load_name` parameter of `load_adapter()`. The\n  adapter will use the same namespace as the labware, and the API will\n  choose the adapter\u2019s version automatically.\n\n> New in version 2\\.15\\.\n\nNew in version 2\\.0\\.\n\nload*labware_by_name(\\_self*, _load_name: 'str'_, _location: 'DeckLocation'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'int' \\= 1_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.0\\.\n\nload*labware_from_definition(\\_self*, _labware_def: \"'LabwareDefinition'\"_, _location: 'Union\\[DeckLocation, OffDeckType]'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nSpecify the presence of a labware on the deck.\n\nThis function loads the labware definition specified by `labware_def`\nto the location specified by `location`.\n\nParameters:\n\n- **labware_def** \u2013 The labware\u2019s definition.\n- **location** (int or str or `OFF_DECK`) \u2013 The slot into which to load the labware,\n  such as `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If specified,\n  this is how the labware will appear in the run log, Labware Position\n  Check, and elsewhere in the Opentrons App and on the touchscreen.\n\nNew in version 2\\.0\\.\n\nload*module(\\_self*, _module_name: 'str'_, _location: 'Optional\\[DeckLocation]' \\= None_, _configuration: 'Optional\\[str]' \\= None_) \u2192 'ModuleTypes'\nLoad a module onto the deck, given its name or model.\n\nThis is the function to call to use a module in your protocol, like\n`load_instrument()` is the method to call to use an instrument\nin your protocol. It returns the created and initialized module\ncontext, which will be a different class depending on the kind of\nmodule loaded.\n\nAfter loading modules, you can access a map of deck positions to loaded modules\nwith `loaded_modules`.\n\nParameters:\n\n- **module_name** (_str_')) \u2013 The name or model of the module.\n  See Available Modules for possible values.\n- **location** (_str_') _or_ _int_') _or_ _None_) \u2013 The location of the module.\n\nThis is usually the name or number of the slot on the deck where you\nwill be placing the module, like `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n\nThe Thermocycler is only valid in one deck location.\nYou don\u2019t have to specify a location when loading it, but if you do,\nit must be `7`, `\"7\"`, or `\"B1\"`. See Thermocycler Module.\n\nChanged in version 2\\.15: You can now specify a deck slot as a coordinate, like `\"D1\"`.\n\n- **configuration** \u2013 Configure a Thermocycler to be in the `semi` position.\n  This parameter does not work. Do not use it.\n\nChanged in version 2\\.14: This parameter dangerously modified the protocol\u2019s geometry system,\nand it didn\u2019t function properly, so it was removed.", "mimetype": "text/plain", "start_char_idx": 12486, "end_char_idx": 16214, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20d7b474-fffe-481a-a28d-3393a60f7c3d": {"__data__": {"id_": "20d7b474-fffe-481a-a28d-3393a60f7c3d", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c808470e-fa8e-4aa1-9392-29e5e6d56841", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "ee779495a022b075b90b4bfd1dc6370be1549a36ab6397cbed7980b18f00e068", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0c611f55-b589-4106-a22b-8cc7087cd72c", "node_type": "1", "metadata": {}, "hash": "69de617afe684e7fe6f55885fb7f31987371af54f87855f2ac618df4f4e95338", "class_name": "RelatedNodeInfo"}}, "text": "This is usually the name or number of the slot on the deck where you\nwill be placing the module, like `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n\nThe Thermocycler is only valid in one deck location.\nYou don\u2019t have to specify a location when loading it, but if you do,\nit must be `7`, `\"7\"`, or `\"B1\"`. See Thermocycler Module.\n\nChanged in version 2\\.15: You can now specify a deck slot as a coordinate, like `\"D1\"`.\n\n- **configuration** \u2013 Configure a Thermocycler to be in the `semi` position.\n  This parameter does not work. Do not use it.\n\nChanged in version 2\\.14: This parameter dangerously modified the protocol\u2019s geometry system,\nand it didn\u2019t function properly, so it was removed.\n\nReturns:\nThe loaded and initialized module\u2014a\n`HeaterShakerContext`,\n`MagneticBlockContext`,\n`MagneticModuleContext`,\n`TemperatureModuleContext`, or\n`ThermocyclerContext`,\ndepending on what you requested with `module_name`.\n\nChanged in version 2\\.13: Added `HeaterShakerContext` return value.\n\nChanged in version 2\\.15: Added `MagneticBlockContext` return value.\n\nNew in version 2\\.0\\.\n\nload*trash_bin(\\_self*, _location: 'DeckLocation'_) \u2192 'TrashBin'\nLoad a trash bin on the deck of a Flex.\n\nSee Trash Bin for details.\n\nIf you try to load a trash bin on an OT\\-2, the API will raise an error.\n\nParameters:\n**location** \u2013 The deck slot where the trash bin is. The\nlocation can be any unoccupied slot in column 1 or 3\\.\n\nIf you try to load a trash bin in column 2 or 4, the API will raise an error.\n\nNew in version 2\\.16\\.\n\nload*waste_chute(\\_self*) \u2192 'WasteChute'\nLoad the waste chute on the deck of a Flex.\n\nSee Waste Chute for details, including the deck configuration\nvariants of the waste chute.\n\nThe deck plate adapter for the waste chute can only go in slot D3\\. If you try to\nload another item in slot D3 after loading the waste chute, or vice versa, the\nAPI will raise an error.\n\nNew in version 2\\.16\\.\n\n_property_ loaded_instruments*: Dict')\\[str'), InstrumentContext]*\nGet the instruments that have been loaded into the protocol.\n\nThis is a map of mount name to instruments previously loaded with\n`load_instrument()`. It does not reflect what instruments are actually\ninstalled on the robot. For example, if the robot has instruments installed on\nboth mounts but your protocol has only loaded one of them with\n`load_instrument()`, the unused one will not be included in\n`loaded_instruments`.\n\nReturns:\nA dict mapping mount name (`\"left\"` or `\"right\"`) to the\ninstrument in that mount. If a mount has no loaded instrument, that key\nwill be missing from the dict.\n\nNew in version 2\\.0\\.\n\n_property_ loaded_labwares*: Dict')\\[int'), Labware]*\nGet the labwares that have been loaded into the protocol context.\n\nSlots with nothing in them will not be present in the return value.\n\nNote\n\nIf a module is present on the deck but no labware has been loaded\ninto it with `module.load_labware()`, there will\nbe no entry for that slot in this value. That means you should not\nuse `loaded_labwares` to determine if a slot is available or not,\nonly to get a list of labwares. If you want a data structure of all\nobjects on the deck regardless of type, use `deck`.\n\nReturns:\nDict mapping deck slot number to labware, sorted in order of\nthe locations.\n\nNew in version 2\\.0\\.\n\n_property_ loaded_modules*: Dict')\\[int'), Union')\\[TemperatureModuleContext, MagneticModuleContext, ThermocyclerContext, HeaterShakerContext, MagneticBlockContext, AbsorbanceReaderContext]]*\nGet the modules loaded into the protocol context.\n\nThis is a map of deck positions to modules loaded by previous calls to\n`load_module()`. It does not reflect what modules are actually attached\nto the robot. For example, if the robot has a Magnetic Module and a Temperature\nModule attached, but the protocol has only loaded the Temperature Module with\n`load_module()`, only the Temperature Module will be included in\n`loaded_modules`.\n\nReturns:\nDict mapping slot name to module contexts. The elements may not be\nordered by slot number.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 15531, "end_char_idx": 19535, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c611f55-b589-4106-a22b-8cc7087cd72c": {"__data__": {"id_": "0c611f55-b589-4106-a22b-8cc7087cd72c", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20d7b474-fffe-481a-a28d-3393a60f7c3d", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "96983910b652d196239e44949ab1d8279ade7e036899e41dd91678e7c37b9e78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aaae4fe6-132e-47cf-8ebf-f923ede94684", "node_type": "1", "metadata": {}, "hash": "ade2e9d45911cf889f88d8ee31e09a630fb59031e06a91672b5614530ad4e6c6", "class_name": "RelatedNodeInfo"}}, "text": "Returns:\nDict mapping deck slot number to labware, sorted in order of\nthe locations.\n\nNew in version 2\\.0\\.\n\n_property_ loaded_modules*: Dict')\\[int'), Union')\\[TemperatureModuleContext, MagneticModuleContext, ThermocyclerContext, HeaterShakerContext, MagneticBlockContext, AbsorbanceReaderContext]]*\nGet the modules loaded into the protocol context.\n\nThis is a map of deck positions to modules loaded by previous calls to\n`load_module()`. It does not reflect what modules are actually attached\nto the robot. For example, if the robot has a Magnetic Module and a Temperature\nModule attached, but the protocol has only loaded the Temperature Module with\n`load_module()`, only the Temperature Module will be included in\n`loaded_modules`.\n\nReturns:\nDict mapping slot name to module contexts. The elements may not be\nordered by slot number.\n\nNew in version 2\\.0\\.\n\n_property_ max_speeds*: AxisMaxSpeeds*\nPer\\-axis speed limits for moving instruments.\n\nChanging values within this property sets the speed limit for each non\\-plunger\naxis of the robot. Note that this property only sets upper limits and can\u2019t\nexceed the physical speed limits of the movement system.\n\nThis property is a dict mapping string names of axes to float values\nof maximum speeds in mm/s. To change a speed, set that axis\u2019s value. To\nreset an axis\u2019s speed to default, delete the entry for that axis\nor assign it to `None`.\n\nSee Axis Speed Limits for examples.\n\nNote\n\nThis property is not yet supported in API version 2\\.14 or higher.\n\nNew in version 2\\.0\\.\n\nmove*labware(\\_self*, _labware: 'Labware'_, _new_location: 'Union\\[DeckLocation, Labware, ModuleTypes, OffDeckType, WasteChute]'_, _use_gripper: 'bool' \\= False_, _pick_up_offset: 'Optional\\[Mapping\\[str, float]]' \\= None_, _drop_offset: 'Optional\\[Mapping\\[str, float]]' \\= None_) \u2192 'None'\nMove a loaded labware to a new location.\n\nSee Moving Labware for more details.\n\nParameters:\n\n- **labware** \u2013 The labware to move. It should be a labware already loaded\n  using `load_labware()`.\n- **new_location** \u2013 Where to move the labware to. This is either:\n\n  - A deck slot like `1`, `\"1\"`, or `\"D1\"`. See Deck Slots.\n  - A hardware module that\u2019s already been loaded on the deck\n    with `load_module()`.\n  - A labware or adapter that\u2019s already been loaded on the deck\n    with `load_labware()` or `load_adapter()`.\n  - The special constant `OFF_DECK`.\n\n- **use_gripper** \u2013 Whether to use the Flex Gripper for this movement.\n\n  - If `True`, use the gripper to perform an automatic\n    movement. This will raise an error in an OT\\-2 protocol.\n  - If `False`, pause protocol execution until the user\n    performs the movement. Protocol execution remains paused until\n    the user presses **Confirm and resume**.\n\nGripper\\-only parameters:\n\nParameters:\n\n- **pick_up_offset** \u2013 Optional x, y, z vector offset to use when picking up labware.\n- **drop_offset** \u2013 Optional x, y, z vector offset to use when dropping off labware.\n\nBefore moving a labware to or from a hardware module, make sure that the labware\u2019s\ncurrent and new locations are accessible, i.e., open the Thermocycler lid or\nopen the Heater\\-Shaker\u2019s labware latch.\n\nNew in version 2\\.15\\.\n\n_property_ params*: Parameters*\nThe values of runtime parameters, as set during run setup.\n\nEach attribute of this object corresponds to the `variable_name` of a parameter.\nSee Using Parameters for details.\n\nParameter values can only be set during run setup. If you try to alter the value\nof any attribute of `params`, the API will raise an error.\n\nNew in version 2\\.18\\.\n\npause(_self_, _msg: 'Optional\\[str]' \\= None_) \u2192 'None'\nPause execution of the protocol until it\u2019s resumed.\n\nA human can resume the protocol in the Opentrons App or on the touchscreen.\n\nNote\n\nIn Python Protocol API version 2\\.13 and earlier, the pause will only\ntake effect on the next function call that involves moving the robot.\n\nParameters:\n**msg** (_str_')) \u2013 An optional message to show in the run log entry for the pause step.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 18676, "end_char_idx": 22676, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaae4fe6-132e-47cf-8ebf-f923ede94684": {"__data__": {"id_": "aaae4fe6-132e-47cf-8ebf-f923ede94684", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ac5dd00-55bc-4767-8291-4b198eba6fd9", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e297f205e1d9b8612bc57625ddb7f321c5a94a0275fe5fd4fa53786c6c5d39ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c611f55-b589-4106-a22b-8cc7087cd72c", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "aaa282b91645baf18ee982a5709a20503db5f63fc226c9765e385638c3cd2149", "class_name": "RelatedNodeInfo"}}, "text": "_property_ params*: Parameters*\nThe values of runtime parameters, as set during run setup.\n\nEach attribute of this object corresponds to the `variable_name` of a parameter.\nSee Using Parameters for details.\n\nParameter values can only be set during run setup. If you try to alter the value\nof any attribute of `params`, the API will raise an error.\n\nNew in version 2\\.18\\.\n\npause(_self_, _msg: 'Optional\\[str]' \\= None_) \u2192 'None'\nPause execution of the protocol until it\u2019s resumed.\n\nA human can resume the protocol in the Opentrons App or on the touchscreen.\n\nNote\n\nIn Python Protocol API version 2\\.13 and earlier, the pause will only\ntake effect on the next function call that involves moving the robot.\n\nParameters:\n**msg** (_str_')) \u2013 An optional message to show in the run log entry for the pause step.\n\nNew in version 2\\.0\\.\n\n_property_ rail_lights_on*: bool')*\nReturns `True` if the robot\u2019s ambient lighting is on.\n\nNew in version 2\\.5\\.\n\nresume(_self_) \u2192 'None'\nResume the protocol after `pause()`.\n\nDeprecated since version 2\\.12: The Python Protocol API supports no safe way for a protocol to resume itself.\nIf you\u2019re looking for a way for your protocol to resume automatically\nafter a period of time, use `delay()`.\n\nNew in version 2\\.0\\.\n\nset*rail_lights(\\_self*, _on: 'bool'_) \u2192 'None'\nControls the robot\u2019s ambient lighting (rail lights).\n\nParameters:\n**on** (_bool_')) \u2013 If `True`, turn on the lights; otherwise, turn them off.\n\nNew in version 2\\.5\\.", "mimetype": "text/plain", "start_char_idx": 21847, "end_char_idx": 23310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4812c02a-deae-4617-a631-3d1d2681ef6d": {"__data__": {"id_": "4812c02a-deae-4617-a631-3d1d2681ef6d", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfcb4e69-2296-491c-b649-15e9377ac385", "node_type": "1", "metadata": {}, "hash": "8f3150428eb86e58317873b88598471387a58ccc5c0de8ebb99312ce990ac010", "class_name": "RelatedNodeInfo"}}, "text": "Instruments\n\n_class_ opentrons.protocol*api.InstrumentContext(\\_core: AbstractInstrument\\AbstractWellCore]*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _broker: LegacyBroker_, _api_version: APIVersion_, _tip_racks: [List')\\[Labware]_, _trash: Optional')\\[Union')\\[Labware, TrashBin, WasteChute]]_, _requested_as: str')_)\nA context for a specific pipette or instrument.\n\nThe InstrumentContext class provides the objects, attributes, and methods that allow\nyou to use pipettes in your protocols.\n\nMethods generally fall into one of two categories.\n\n> - They can change the state of the InstrumentContext object, like how fast it\n>   moves liquid or where it disposes of used tips.\n> - They can command the instrument to perform an action, like picking up tips,\n>   moving to certain locations, and aspirating or dispensing liquid.\n\nObjects in this class should not be instantiated directly. Instead, instances are\nreturned by `ProtocolContext.load_instrument()`.\n\nNew in version 2\\.0\\.\n\n_property_ active_channels*: int')*\nThe number of channels the pipette will use to pick up tips.\n\nBy default, all channels on the pipette. Use `configure_nozzle_layout()`\nto set the pipette to use fewer channels.\n\nNew in version 2\\.16\\.\n\nair*gap(\\_self*, _volume: 'Optional\\[float]' \\= None_, _height: 'Optional\\[float]' \\= None_) \u2192 'InstrumentContext'\nDraw air into the pipette\u2019s tip at the current well.\n\nSee Air Gap.\n\nParameters:\n\n- **volume** (_float_')) \u2013 The amount of air, measured in \u00b5L. Calling `air_gap()` with no\n  arguments uses the entire remaining volume in the pipette.\n- **height** (_float_')) \u2013 The height, in mm, to move above the current well before creating\n  the air gap. The default is 5 mm above the current well.\n\nRaises:\n`UnexpectedTipRemovalError` \u2013 If no tip is attached to the pipette.\n\nRaises:\n**RuntimeError**') \u2013 If location cache is `None`. This should happen if\n`air_gap()` is called without first calling a method\nthat takes a location (e.g., `aspirate()`,\n`dispense()`)\n\nReturns:\nThis instance.\n\nNote\n\nBoth `volume` and `height` are optional, but if you want to specify only\n`height` you must do it as a keyword argument:\n`pipette.air_gap(height=2)`. If you call `air_gap` with a single,\nunnamed argument, it will always be interpreted as a volume.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\naspirate(_self_, _volume: 'Optional\\[float]' \\= None_, _location: 'Optional\\[Union\\[types.Location, labware.Well]]' \\= None_, _rate: 'float' \\= 1\\.0_) \u2192 'InstrumentContext'\nDraw liquid into a pipette tip.\n\nSee Aspirate for more details and examples.\n\nParameters:\n\n- **volume** (_int_') _or_ _float_')) \u2013 The volume to aspirate, measured in \u00b5L. If unspecified,\n  defaults to the maximum volume for the pipette and its currently\n  attached tip.\n\nIf `aspirate` is called with a volume of precisely 0, its behavior\ndepends on the API level of the protocol. On API levels below 2\\.16,\nit will behave the same as a volume of `None`/unspecified: aspirate\nuntil the pipette is full. On API levels at or above 2\\.16, no liquid\nwill be aspirated.\n\n- **location** \u2013 Tells the robot where to aspirate from. The location can be\n  a `Well` or a `Location`.\n\n> - If the location is a `Well`, the robot will aspirate at\n>   or above the bottom center of the well. The distance (in mm)\n>   from the well bottom is specified by\n>   `well_bottom_clearance.aspirate`.\n>   - If the location is a `Location` (e.g., the result of\n>     `Well.top()` or `Well.bottom()`), the robot\n>     will aspirate from that specified position.\n>   - If the `location` is unspecified, the robot will\n>     aspirate from its current position.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3747, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfcb4e69-2296-491c-b649-15e9377ac385": {"__data__": {"id_": "cfcb4e69-2296-491c-b649-15e9377ac385", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4812c02a-deae-4617-a631-3d1d2681ef6d", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "90de27aa0ca488afe481112141b0a5f33a6dd4347558c32adb41d7f82af27161", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c94276a9-98a1-4349-84d0-b78b5e8d1b7e", "node_type": "1", "metadata": {}, "hash": "0de06e24b12daad2652eb5f50209faae79e6d5077a647777970d2a63bb7ae01d", "class_name": "RelatedNodeInfo"}}, "text": "On API levels at or above 2\\.16, no liquid\nwill be aspirated.\n\n- **location** \u2013 Tells the robot where to aspirate from. The location can be\n  a `Well` or a `Location`.\n\n> - If the location is a `Well`, the robot will aspirate at\n>   or above the bottom center of the well. The distance (in mm)\n>   from the well bottom is specified by\n>   `well_bottom_clearance.aspirate`.\n>   - If the location is a `Location` (e.g., the result of\n>     `Well.top()` or `Well.bottom()`), the robot\n>     will aspirate from that specified position.\n>   - If the `location` is unspecified, the robot will\n>     aspirate from its current position.\n\n- **rate** (_float_')) \u2013 A multiplier for the default flow rate of the pipette. Calculated\n  as `rate` multiplied by `flow_rate.aspirate`. If not specified, defaults to 1\\.0\\. See\n  Pipette Flow Rates.\n\nReturns:\nThis instance.\n\nNote\n\nIf `aspirate` is called with a single, unnamed argument, it will treat\nthat argument as `volume`. If you want to call `aspirate` with only\n`location`, specify it as a keyword argument:\n`pipette.aspirate(location=plate['A1'])`\n\nNew in version 2\\.0\\.\n\nblow*out(\\_self*, _location: 'Optional\\[Union\\[types.Location, labware.Well, TrashBin, WasteChute]]' \\= None_) \u2192 'InstrumentContext'\nBlow an extra amount of air through a pipette\u2019s tip to clear it.\n\nIf `dispense()` is used to empty a pipette, usually a small amount of\nliquid remains in the tip. During a blowout, the pipette moves the plunger\nbeyond its normal limits to help remove all liquid from the pipette tip. See\nBlow Out.\n\nParameters:\n**location** (`Well` or `Location` or `None`) \u2013 The blowout location. If no location is specified, the pipette\nwill blow out from its current position.\n\nChanged in version 2\\.16: Accepts `TrashBin` and `WasteChute` values.\n\nRaises:\n**RuntimeError**') \u2013 If no location is specified and the location cache is\n`None`. This should happen if `blow_out()` is called\nwithout first calling a method that takes a location, like\n`aspirate()` or `dispense()`.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\n_property_ channels*: int')*\nThe number of channels on the pipette.\n\nPossible values are 1, 8, or 96\\.\n\nSee also `type`.\n\nNew in version 2\\.0\\.\n\nconfigure*for_volume(\\_self*, _volume: 'float'_) \u2192 'None'\nConfigure a pipette to handle a specific volume of liquid, measured in \u00b5L.\nThe pipette enters a volume mode depending on the volume provided. Changing\npipette modes alters properties of the instance of\n`InstrumentContext`, such as default flow rate, minimum volume, and\nmaximum volume. The pipette remains in the mode set by this function until it is\ncalled again.\n\nThe Flex 1\\-Channel 50 \u00b5L and Flex 8\\-Channel 50 \u00b5L pipettes must operate in a\nlow\\-volume mode to accurately dispense very small volumes of liquid. Low\\-volume\nmode can only be set by calling `configure_for_volume()`. See\nVolume Modes.\n\nNote\n\nChanging a pipette\u2019s mode will reset its flow rates.\n\nThis function will raise an error if called when the pipette\u2019s tip contains\nliquid. It won\u2019t raise an error if a tip is not attached, but changing modes may\naffect which tips the pipette can subsequently pick up without raising an error.\n\nThis function will also raise an error if `volume` is outside of the\nminimum and maximum capacities of the pipette (e.g.,\nsetting `volume=1` for a Flex 1000 \u00b5L pipette).\n\nParameters:\n**volume** (_float_')) \u2013 The volume, in \u00b5L, that the pipette will prepare to handle.\n\nNew in version 2\\.15\\.", "mimetype": "text/plain", "start_char_idx": 3119, "end_char_idx": 6572, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c94276a9-98a1-4349-84d0-b78b5e8d1b7e": {"__data__": {"id_": "c94276a9-98a1-4349-84d0-b78b5e8d1b7e", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cfcb4e69-2296-491c-b649-15e9377ac385", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "54dc6fb3ae53080f266a1eb6827bb890924955ed6bb9bd1dc80ca3387befc5ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59145c5f-26e2-4613-8df5-e10874e81f20", "node_type": "1", "metadata": {}, "hash": "1f5d7947363d02481beb161c60c9731ca4b2ed72e9e3e356d8448083d62c4c6e", "class_name": "RelatedNodeInfo"}}, "text": "Low\\-volume\nmode can only be set by calling `configure_for_volume()`. See\nVolume Modes.\n\nNote\n\nChanging a pipette\u2019s mode will reset its flow rates.\n\nThis function will raise an error if called when the pipette\u2019s tip contains\nliquid. It won\u2019t raise an error if a tip is not attached, but changing modes may\naffect which tips the pipette can subsequently pick up without raising an error.\n\nThis function will also raise an error if `volume` is outside of the\nminimum and maximum capacities of the pipette (e.g.,\nsetting `volume=1` for a Flex 1000 \u00b5L pipette).\n\nParameters:\n**volume** (_float_')) \u2013 The volume, in \u00b5L, that the pipette will prepare to handle.\n\nNew in version 2\\.15\\.\n\nconfigure*nozzle_layout(\\_self*, _style: 'NozzleLayout'_, _start: 'Optional\\[str]' \\= None_, _end: 'Optional\\[str]' \\= None_, _front_right: 'Optional\\[str]' \\= None_, _back_left: 'Optional\\[str]' \\= None_, _tip_racks: 'Optional\\[List\\[labware.Labware]]' \\= None_) \u2192 'None'\nConfigure how many tips the 8\\-channel or 96\\-channel pipette will pick up.\n\nChanging the nozzle layout will affect gantry movement for all subsequent\npipetting actions that the pipette performs. It also alters the pipette\u2019s\nbehavior for picking up tips. The pipette will continue to use the specified\nlayout until this function is called again.\n\nNote\n\nWhen picking up fewer than 96 tips at once, the tip rack _must not_ be\nplaced in a tip rack adapter in the deck. If you try to pick up fewer than 96\ntips from a tip rack that is in an adapter, the API will raise an error.\n\nParameters:\n\n- **style** (`NozzleLayout` or `None`) \u2013 The shape of the nozzle layout.\n\n  - `SINGLE` sets the pipette to use 1 nozzle. This corresponds to a single of well on labware.\n  - `COLUMN` sets the pipette to use 8 nozzles, aligned from front to back\n    with respect to the deck. This corresponds to a column of wells on labware.\n  - `PARTIAL_COLUMN` sets the pipette to use 2\\-7 nozzles, aligned from front to back\n    with respect to the deck.\n  - `ROW` sets the pipette to use 12 nozzles, aligned from left to right\n    with respect to the deck. This corresponds to a row of wells on labware.\n  - `ALL` resets the pipette to use all of its nozzles. Calling\n    `configure_nozzle_layout` with no arguments also resets the pipette.\n\n- **start** (str or `None`) \u2013 The primary nozzle of the layout, which the robot uses\n  to determine how it will move to different locations on the deck. The string\n  should be of the same format used when identifying wells by name.\n  Required unless setting `style=ALL`.\n\nNote\n\nIf possible, don\u2019t use both `start=\"A1\"` and `start=\"A12\"` to pick up\ntips _from the same rack_. Doing so can affect positional accuracy.\n\n- **end** (str or `None`) \u2013 The nozzle at the end of a linear layout, which is used\n  to determine how many tips will be picked up by a pipette. The string\n  should be of the same format used when identifying wells by name.\n  Required when setting `style=PARTIAL_COLUMN`.\n\nNote\n\nNozzle layouts numbering between 2\\-7 nozzles, account for the distance from\n`start`. For example, 4 nozzles would require `start=\"H1\"` and `end=\"E1\"`.\n\n- **tip_racks** (List\\[`Labware`]) \u2013 Behaves the same as setting the `tip_racks` parameter of\n  `load_instrument()`. If not specified, the new configuration resets\n  `InstrumentContext.tip_racks` and you must specify the location\n  every time you call `pick_up_tip()`.\n\nNew in version 2\\.16\\.\n\nconsolidate(_self_, _volume: 'Union\\[float_, _Sequence\\[float]]'_, _source: 'List\\[labware.Well]'_, _dest: 'labware.Well'_, _\\\\\\*args: 'Any'_, _\\\\\\*\\\\\\*kwargs: 'Any'_) \u2192 'InstrumentContext'\nMove liquid from multiple source wells to a single destination well.", "mimetype": "text/plain", "start_char_idx": 5893, "end_char_idx": 9566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59145c5f-26e2-4613-8df5-e10874e81f20": {"__data__": {"id_": "59145c5f-26e2-4613-8df5-e10874e81f20", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c94276a9-98a1-4349-84d0-b78b5e8d1b7e", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "ee3d17cdaee944f9ec4e860d64648da04b3c57c0dcb592db214deb1fa97002d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99a604e4-a110-4600-b68b-b11b0ad3538f", "node_type": "1", "metadata": {}, "hash": "f442209e02fe82e00dccd7037ac2ec19f6fe7b1bee8327f99fd4f061280d84da", "class_name": "RelatedNodeInfo"}}, "text": "For example, 4 nozzles would require `start=\"H1\"` and `end=\"E1\"`.\n\n- **tip_racks** (List\\[`Labware`]) \u2013 Behaves the same as setting the `tip_racks` parameter of\n  `load_instrument()`. If not specified, the new configuration resets\n  `InstrumentContext.tip_racks` and you must specify the location\n  every time you call `pick_up_tip()`.\n\nNew in version 2\\.16\\.\n\nconsolidate(_self_, _volume: 'Union\\[float_, _Sequence\\[float]]'_, _source: 'List\\[labware.Well]'_, _dest: 'labware.Well'_, _\\\\\\*args: 'Any'_, _\\\\\\*\\\\\\*kwargs: 'Any'_) \u2192 'InstrumentContext'\nMove liquid from multiple source wells to a single destination well.\n\nParameters:\n\n- **volume** \u2013 The amount, in \u00b5L, to aspirate from each source well.\n- **source** \u2013 A list of wells to aspirate liquid from.\n- **dest** \u2013 A single well to dispense liquid into.\n- **kwargs** \u2013 See `transfer()` and the Complex Liquid Handling Parameters page.\n  Some parameters behave differently than when transferring.\n  `disposal_volume` and `mix_before` are ignored.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\n_property_ current_volume*: float')*\nThe current amount of liquid held in the pipette, measured in \u00b5L.\n\nNew in version 2\\.0\\.\n\n_property_ default_speed*: float')*\nThe speed at which the robot\u2019s gantry moves in mm/s.\n\nThe default speed for Flex varies between 300 and 350 mm/s. The OT\\-2 default is\n400 mm/s. In addition to changing the default, the speed of individual motions\ncan be changed with the `speed` argument of the\n`InstrumentContext.move_to()` method. See Gantry Speed.\n\nNew in version 2\\.0\\.\n\ndetect*liquid_presence(\\_self*, _well: 'labware.Well'_) \u2192 'bool'\nCheck if there is liquid in a well.\n\nReturns:\nA boolean.\n\nNew in version 2\\.20\\.\n\ndispense(_self_, _volume: 'Optional\\[float]' \\= None_, _location: 'Optional\\[Union\\[types.Location, labware.Well, TrashBin, WasteChute]]' \\= None_, _rate: 'float' \\= 1\\.0_, _push_out: 'Optional\\[float]' \\= None_) \u2192 'InstrumentContext'\nDispense liquid from a pipette tip.\n\nSee Dispense for more details and examples.\n\nParameters:\n\n- **volume** (_int_') _or_ _float_')) \u2013 The volume to dispense, measured in \u00b5L.\n\n  - If unspecified or `None`, dispense the `current_volume`.\n  - If 0, the behavior of `dispense()` depends on the API level\n    of the protocol. In API version 2\\.16 and earlier, dispense all\n    liquid in the pipette (same as unspecified or `None`). In API\n    version 2\\.17 and later, dispense no liquid.\n  - If greater than `current_volume`, the behavior of\n    `dispense()` depends on the API level of the protocol. In API\n    version 2\\.16 and earlier, dispense all liquid in the pipette.\n    In API version 2\\.17 and later, raise an error.\n\n- **location** \u2013 Tells the robot where to dispense liquid held in the pipette.\n  The location can be a `Well`, `Location`,\n  `TrashBin`, or `WasteChute`.\n\n> - If a `Well`, the pipette will dispense\n>   at or above the bottom center of the well. The distance (in\n>   mm) from the well bottom is specified by\n>   `well_bottom_clearance.dispense`. + If a `Location` (e.g., the result of\n>   `Well.top()` or `Well.bottom()`), the pipette\n>   will dispense at that specified position. + If a trash container, the pipette will dispense at a location\n>   relative to its center and the trash container\u2019s top center.\n>   See Position Relative to Trash Containers for details. + If unspecified, the pipette will\n>   dispense at its current position.", "mimetype": "text/plain", "start_char_idx": 8947, "end_char_idx": 12350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99a604e4-a110-4600-b68b-b11b0ad3538f": {"__data__": {"id_": "99a604e4-a110-4600-b68b-b11b0ad3538f", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59145c5f-26e2-4613-8df5-e10874e81f20", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "b0a97b4c4231ebffc1a7a40e89b73e18724255351cbf3ca9c1a7f915b7dbe3a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "433118a8-4031-4aaf-bbdc-e0965f79997e", "node_type": "1", "metadata": {}, "hash": "723da1f602dc65108be1dd8296936ae4954ad499b6100467bcf2aeca5c782739", "class_name": "RelatedNodeInfo"}}, "text": "- **location** \u2013 Tells the robot where to dispense liquid held in the pipette.\n  The location can be a `Well`, `Location`,\n  `TrashBin`, or `WasteChute`.\n\n> - If a `Well`, the pipette will dispense\n>   at or above the bottom center of the well. The distance (in\n>   mm) from the well bottom is specified by\n>   `well_bottom_clearance.dispense`. + If a `Location` (e.g., the result of\n>   `Well.top()` or `Well.bottom()`), the pipette\n>   will dispense at that specified position. + If a trash container, the pipette will dispense at a location\n>   relative to its center and the trash container\u2019s top center.\n>   See Position Relative to Trash Containers for details. + If unspecified, the pipette will\n>   dispense at its current position.\n>   If only a `location` is passed (e.g.,\n>   `pipette.dispense(location=plate['A1'])`), all of the\n>   liquid aspirated into the pipette will be dispensed (the\n>   amount is accessible through `current_volume`).\n\nChanged in version 2\\.16: Accepts `TrashBin` and `WasteChute` values.\n\n- **rate** (_float_')) \u2013 How quickly a pipette dispenses liquid. The speed in \u00b5L/s is\n  calculated as `rate` multiplied by `flow_rate.dispense`. If not specified, defaults to 1\\.0\\. See\n  Pipette Flow Rates.\n- **push_out** (_float_')) \u2013 Continue past the plunger bottom to help ensure all liquid\n  leaves the tip. Measured in \u00b5L. The default value is `None`.\n\nSee Push Out After Dispense for details.\n\nReturns:\nThis instance.\n\nNote\n\nIf `dispense` is called with a single, unnamed argument, it will treat\nthat argument as `volume`. If you want to call `dispense` with only\n`location`, specify it as a keyword argument:\n`pipette.dispense(location=plate['A1'])`.\n\nChanged in version 2\\.15: Added the `push_out` parameter.\n\nChanged in version 2\\.17: Behavior of the `volume` parameter.\n\nNew in version 2\\.0\\.\n\ndistribute(_self_, _volume: 'Union\\[float_, _Sequence\\[float]]'_, _source: 'labware.Well'_, _dest: 'List\\[labware.Well]'_, _\\\\\\*args: 'Any'_, _\\\\\\*\\\\\\*kwargs: 'Any'_) \u2192 'InstrumentContext'\nMove a volume of liquid from one source to multiple destinations.\n\nParameters:\n\n- **volume** \u2013 The amount, in \u00b5L, to dispense into each destination well.\n- **source** \u2013 A single well to aspirate liquid from.\n- **dest** \u2013 A list of wells to dispense liquid into.\n- **kwargs** \u2013 See `transfer()` and the Complex Liquid Handling Parameters page.\n  Some parameters behave differently than when transferring.\n\n> - `disposal_volume` aspirates additional liquid to improve the accuracy\n>   of each dispense. Defaults to the minimum volume of the pipette. See\n>   Disposal Volume for details.\n>   - `mix_after` is ignored.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\ndrop*tip(\\_self*, _location: 'Optional\\[Union\\[types.Location, labware.Well, TrashBin, WasteChute]]' \\= None_, _home_after: 'Optional\\[bool]' \\= None_) \u2192 'InstrumentContext'\nDrop the current tip.\n\nSee Dropping a Tip for examples.\n\nIf no location is passed (e.g. `pipette.drop_tip()`), the pipette will drop\nthe attached tip into its `trash_container`.\n\nThe location in which to drop the tip can be manually specified with the\n`location` argument. The `location` argument can be specified in several\nways:\n\n> - As a `Well`. This uses a default location relative to the well.\n>   This style of call can be used to make the robot drop a tip into labware\n>   like a well plate or a reservoir. For example,\n>   `pipette.drop_tip(location=reservoir[\"A1\"])`.\n> - As a `Location`. For example, to drop a tip from an\n>   unusually large height above the tip rack, you could call\n>   `pipette.drop_tip(tip_rack[\"A1\"].top(z=10))`.\n> - As a `TrashBin`.", "mimetype": "text/plain", "start_char_idx": 11610, "end_char_idx": 15235, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "433118a8-4031-4aaf-bbdc-e0965f79997e": {"__data__": {"id_": "433118a8-4031-4aaf-bbdc-e0965f79997e", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "99a604e4-a110-4600-b68b-b11b0ad3538f", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "17876b18379a8c2d05505aed5e57c91dd1cac0ec4a56950c036ed35543a07276", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4", "node_type": "1", "metadata": {}, "hash": "3bc33ba7c87d2dfafeb8d121853bb1b410c25948397fcab15cd6e5298ba0264b", "class_name": "RelatedNodeInfo"}}, "text": "If no location is passed (e.g. `pipette.drop_tip()`), the pipette will drop\nthe attached tip into its `trash_container`.\n\nThe location in which to drop the tip can be manually specified with the\n`location` argument. The `location` argument can be specified in several\nways:\n\n> - As a `Well`. This uses a default location relative to the well.\n>   This style of call can be used to make the robot drop a tip into labware\n>   like a well plate or a reservoir. For example,\n>   `pipette.drop_tip(location=reservoir[\"A1\"])`.\n> - As a `Location`. For example, to drop a tip from an\n>   unusually large height above the tip rack, you could call\n>   `pipette.drop_tip(tip_rack[\"A1\"].top(z=10))`.\n> - As a `TrashBin`. This uses a default location relative to the\n>   `TrashBin` object. For example,\n>   `pipette.drop_tip(location=trash_bin)`.\n> - As a `WasteChute`. This uses a default location relative to\n>   the `WasteChute` object. For example,\n>   `pipette.drop_tip(location=waste_chute)`.\n\nIn API versions 2\\.15 to 2\\.17, if `location` is a `TrashBin` or not\nspecified, the API will instruct the pipette to drop tips in different locations\nwithin the bin. Varying the tip drop location helps prevent tips\nfrom piling up in a single location.\n\nStarting with API version 2\\.18, the API will only vary the tip drop location if\n`location` is not specified. Specifying a `TrashBin` as the `location`\nbehaves the same as specifying `TrashBin.top()`, which is a fixed position.\n\nParameters:\n\n- **location** (`Location` or `Well` or `None`) \u2013 Where to drop the tip.\n\nChanged in version 2\\.16: Accepts `TrashBin` and `WasteChute` values.\n\n- **home_after** \u2013 Whether to home the pipette\u2019s plunger after dropping the tip. If not\n  specified, defaults to `True` on an OT\\-2\\.\n\nWhen `False`, the pipette does not home its plunger. This can save a few\nseconds, but is not recommended. Homing helps the robot track the pipette\u2019s\nposition.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\n_property_ flow_rate*: FlowRates*\nThe speeds, in \u00b5L/s, configured for the pipette.\n\nSee Pipette Flow Rates.\n\nThis is an object with attributes `aspirate`, `dispense`, and `blow_out`\nholding the flow rate for the corresponding operation.\n\nNote\n\nSetting values of `speed`, which is deprecated, will override the\nvalues in `flow_rate`.\n\nNew in version 2\\.0\\.\n\n_property_ has_tip*: bool')*\nWhether this instrument has a tip attached or not.\n\nThe value of this property is determined logically by the API, not by detecting\nthe physical presence of a tip. This is the case even on Flex, which has sensors\nto detect tip attachment.\n\nNew in version 2\\.7\\.\n\nhome(_self_) \u2192 'InstrumentContext'\nHome the robot.\n\nSee Homing.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\nhome*plunger(\\_self*) \u2192 'InstrumentContext'\nHome the plunger associated with this mount.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\n_property_ hw_pipette*: PipetteDict*\nView the information returned by the hardware API directly.\n\nRaises:\n`types.PipetteNotAttachedError` if the pipette is\nno longer attached (should not happen).\n\nNew in version 2\\.0\\.\n\n_property_ liquid_presence_detection*: bool')*\nGets the global setting for liquid level detection.\n\nWhen True, liquid_probe will be called before\naspirates and dispenses to bring the tip to the liquid level.\n\nThe default value is False.\n\nNew in version 2\\.20\\.\n\n_property_ max_volume*: float')*\nThe maximum volume, in \u00b5L, that the pipette can hold.\n\nThe maximum volume that you can actually aspirate might be lower than this,\ndepending on what kind of tip is attached to this pipette. For example, a P300\nSingle\\-Channel pipette always has a `max_volume` of 300 \u00b5L, but if it\u2019s using\na 200 \u00b5L filter tip, its usable volume would be limited to 200 \u00b5L.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 14526, "end_char_idx": 18290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4": {"__data__": {"id_": "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "433118a8-4031-4aaf-bbdc-e0965f79997e", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "14cf2af61e50ea8e3d7c43c5a8bcf9ca76d4fb3de58dbf94066c1009f4df6a77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee7b7752-6013-4fc6-90c6-cb1559acf82a", "node_type": "1", "metadata": {}, "hash": "05f00356e09d9ded31a4a0342c10a95d9a1d7467cafadc95bf42dd6f2077b456", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.0\\.\n\n_property_ liquid_presence_detection*: bool')*\nGets the global setting for liquid level detection.\n\nWhen True, liquid_probe will be called before\naspirates and dispenses to bring the tip to the liquid level.\n\nThe default value is False.\n\nNew in version 2\\.20\\.\n\n_property_ max_volume*: float')*\nThe maximum volume, in \u00b5L, that the pipette can hold.\n\nThe maximum volume that you can actually aspirate might be lower than this,\ndepending on what kind of tip is attached to this pipette. For example, a P300\nSingle\\-Channel pipette always has a `max_volume` of 300 \u00b5L, but if it\u2019s using\na 200 \u00b5L filter tip, its usable volume would be limited to 200 \u00b5L.\n\nNew in version 2\\.0\\.\n\n_property_ min_volume*: float')*\nThe minimum volume, in \u00b5L, that the pipette can hold. This value may change\nbased on the volume mode that the pipette is\ncurrently configured for.\n\nNew in version 2\\.0\\.\n\nmix(_self_, _repetitions: 'int' \\= 1_, _volume: 'Optional\\[float]' \\= None_, _location: 'Optional\\[Union\\[types.Location, labware.Well]]' \\= None_, _rate: 'float' \\= 1\\.0_) \u2192 'InstrumentContext'\nMix a volume of liquid by repeatedly aspirating and dispensing it in a single location.\n\nSee Mix for examples.\n\nParameters:\n\n- **repetitions** \u2013 Number of times to mix (default is 1\\).\n- **volume** \u2013 The volume to mix, measured in \u00b5L. If unspecified, defaults\n  to the maximum volume for the pipette and its attached tip.\n\nIf `mix` is called with a volume of precisely 0, its behavior\ndepends on the API level of the protocol. On API levels below 2\\.16,\nit will behave the same as a volume of `None`/unspecified: mix\nthe full working volume of the pipette. On API levels at or above 2\\.16,\nno liquid will be mixed.\n\n- **location** \u2013 The `Well` or `Location` where the\n  pipette will mix. If unspecified, the pipette will mix at its\n  current position.\n- **rate** \u2013 How quickly the pipette aspirates and dispenses liquid while\n  mixing. The aspiration flow rate is calculated as `rate`\n  multiplied by `flow_rate.aspirate`. The\n  dispensing flow rate is calculated as `rate` multiplied by\n  `flow_rate.dispense`. See\n  Pipette Flow Rates.\n\nRaises:\n`UnexpectedTipRemovalError` \u2013 If no tip is attached to the pipette.\n\nReturns:\nThis instance.\n\nNote\n\nAll the arguments of `mix` are optional. However, if you omit one of them,\nall subsequent arguments must be passed as keyword arguments. For instance,\n`pipette.mix(1, location=wellplate['A1'])` is a valid call, but\n`pipette.mix(1, wellplate['A1'])` is not.\n\nNew in version 2\\.0\\.\n\n_property_ model*: str')*\nThe model string for the pipette (e.g., `'p300_single_v1.3'`)\n\nNew in version 2\\.0\\.\n\n_property_ mount*: str')*\nReturn the name of the mount the pipette is attached to.\n\nThe possible names are `\"left\"` and `\"right\"`.\n\nNew in version 2\\.0\\.\n\nmove*to(\\_self*, _location: 'Union\\[types.Location, TrashBin, WasteChute]'_, _force_direct: 'bool' \\= False_, _minimum_z_height: 'Optional\\[float]' \\= None_, _speed: 'Optional\\[float]' \\= None_, _publish: 'bool' \\= True_) \u2192 'InstrumentContext'\nMove the instrument.\n\nSee Move To for examples.\n\nParameters:\n\n- **location** (`Location`) \u2013 Where to move to.\n\nChanged in version 2\\.16: Accepts `TrashBin` and `WasteChute` values.\n\n- **force_direct** \u2013 If `True`, move directly to the destination without arc\n  motion.\n\nWarning\n\nForcing direct motion can cause the pipette to crash\ninto labware, modules, or other objects on the deck.\n\n- **minimum_z_height** \u2013 An amount, measured in mm, to raise the mid\\-arc height.\n  The mid\\-arc height can\u2019t be lowered.\n- **speed** \u2013 The speed at which to move. By default,\n  `InstrumentContext.default_speed`.", "mimetype": "text/plain", "start_char_idx": 17594, "end_char_idx": 21228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee7b7752-6013-4fc6-90c6-cb1559acf82a": {"__data__": {"id_": "ee7b7752-6013-4fc6-90c6-cb1559acf82a", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "d2d480a388e99d2b8c683b44086e9b348b5d295fee7518f79ecffe9f6e7e18e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4c2e637-bf95-40cb-b4de-78de8b49b6b9", "node_type": "1", "metadata": {}, "hash": "1cb28d7a826a5b9544eba08185afd4c9f88b4fc644ffaea8c8d9cdb36b22057c", "class_name": "RelatedNodeInfo"}}, "text": "See Move To for examples.\n\nParameters:\n\n- **location** (`Location`) \u2013 Where to move to.\n\nChanged in version 2\\.16: Accepts `TrashBin` and `WasteChute` values.\n\n- **force_direct** \u2013 If `True`, move directly to the destination without arc\n  motion.\n\nWarning\n\nForcing direct motion can cause the pipette to crash\ninto labware, modules, or other objects on the deck.\n\n- **minimum_z_height** \u2013 An amount, measured in mm, to raise the mid\\-arc height.\n  The mid\\-arc height can\u2019t be lowered.\n- **speed** \u2013 The speed at which to move. By default,\n  `InstrumentContext.default_speed`. This controls the\n  straight linear speed of the motion. To limit individual axis\n  speeds, use `ProtocolContext.max_speeds`.\n- **publish** \u2013 Whether to list this function call in the run preview.\n  Default is `True`.\n\nNew in version 2\\.0\\.\n\n_property_ name*: str')*\nThe name string for the pipette (e.g., `\"p300_single\"`).\n\nNew in version 2\\.0\\.\n\npick*up_tip(\\_self*, _location: 'Union\\[types.Location, labware.Well, labware.Labware, None]' \\= None_, _presses: 'Optional\\[int]' \\= None_, _increment: 'Optional\\[float]' \\= None_, _prep_after: 'Optional\\[bool]' \\= None_) \u2192 'InstrumentContext'\nPick up a tip for the pipette to run liquid\\-handling commands.\n\nSee Picking Up a Tip.\n\nIf no location is passed, the pipette will pick up the next available tip in its\n`tip_racks` list. Within each tip rack, tips will\nbe picked up in the order specified by the labware definition and\n`Labware.wells()`. To adjust where the sequence starts, use\n`starting_tip`.\n\nThe exact position for tip pickup accounts for the length of the tip and how\nmuch the tip overlaps with the pipette nozzle. These measurements are fixed\nvalues on Flex, and are based on the results of tip length calibration on OT\\-2\\.\n\nNote\n\nAPI version 2\\.19 updates the tip overlap values for Flex. When updating a\nprotocol from 2\\.18 (or lower) to 2\\.19 (or higher), pipette performance\nshould improve without additional changes to your protocol. Nevertheless, it\nis good practice after updating to do the following:\n\n- Run Labware Position Check.\n- Perform a dry run of your protocol.\n- If tip position is slightly higher than expected, adjust the `location`\n  parameter of pipetting actions to achieve the desired result.\n\nParameters:\n\n- **location** (`Well` or `Labware` or `types.Location`) \u2013 The location from which to pick up a tip. The `location`\n  argument can be specified in several ways:\n\n> - As a `Well`. For example,\n>   `pipette.pick_up_tip(tiprack.wells()[0])` will always pick\n>   up the first tip in `tiprack`, even if the rack is not a\n>   member of `InstrumentContext.tip_racks`.\n>   - As a labware. `pipette.pick_up_tip(tiprack)` will pick up\n>     the next available tip in `tiprack`, even if the rack is\n>     not a member of `InstrumentContext.tip_racks`.\n>   - As a `Location`. Use this to make fine\n>     adjustments to the pickup location. For example, to tell\n>     the robot to start its pick up tip routine 1 mm closer to\n>     the top of the well in the tip rack, call\n>     `pipette.pick_up_tip(tiprack[\"A1\"].top(z=-1))`.\n\n- **presses** (_int_')) \u2013 The number of times to lower and then raise the pipette when\n  picking up a tip, to ensure a good seal. Zero (`0`) will\n  result in the pipette hovering over the tip but not picking it\n  up (generally not desirable, but could be used for a dry run).\n\n> Deprecated since version 2\\.14: Use the Opentrons App to change pipette pick\\-up settings.\n\n- **increment** (_float_')) \u2013 The additional distance to travel on each successive press.\n  For example, if `presses=3` and `increment=1.0`, then the\n  first press will travel down into the tip by 3\\.5 mm, the\n  second by 4\\.5 mm, and the third by 5\\.5 mm).", "mimetype": "text/plain", "start_char_idx": 20652, "end_char_idx": 24369, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4c2e637-bf95-40cb-b4de-78de8b49b6b9": {"__data__": {"id_": "a4c2e637-bf95-40cb-b4de-78de8b49b6b9", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee7b7752-6013-4fc6-90c6-cb1559acf82a", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "16a4dad093331449e6c90fff5977584feedc93f228a482b59a88cd897caa70ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebe419bd-5a6e-41f3-8c29-1522cbb5495b", "node_type": "1", "metadata": {}, "hash": "0bbe438edbc7c6376713ce56c6c8555abbaed105038dbdaca19a52ebf71d2f8a", "class_name": "RelatedNodeInfo"}}, "text": "- **presses** (_int_')) \u2013 The number of times to lower and then raise the pipette when\n  picking up a tip, to ensure a good seal. Zero (`0`) will\n  result in the pipette hovering over the tip but not picking it\n  up (generally not desirable, but could be used for a dry run).\n\n> Deprecated since version 2\\.14: Use the Opentrons App to change pipette pick\\-up settings.\n\n- **increment** (_float_')) \u2013 The additional distance to travel on each successive press.\n  For example, if `presses=3` and `increment=1.0`, then the\n  first press will travel down into the tip by 3\\.5 mm, the\n  second by 4\\.5 mm, and the third by 5\\.5 mm).\n\n> Deprecated since version 2\\.14: Use the Opentrons App to change pipette pick\\-up settings.\n\n- **prep_after** (_bool_')) \u2013 Whether the pipette plunger should prepare itself to aspirate\n  immediately after picking up a tip.\n\nIf `True`, the pipette will move its plunger position to\nbottom in preparation for any following calls to\n`aspirate()`.\n\nIf `False`, the pipette will prepare its plunger later,\nduring the next call to `aspirate()`. This is\naccomplished by moving the tip to the top of the well, and\npositioning the plunger outside any potential liquids.\n\nWarning\n\nThis is provided for compatibility with older Python\nProtocol API behavior. You should normally leave this\nunset.\n\nSetting `prep_after=False` may create an unintended\npipette movement, when the pipette automatically moves\nthe tip to the top of the well to prepare the plunger.\n\nChanged in version 2\\.13: Adds the `prep_after` argument. In version 2\\.12 and earlier, the plunger\ncan\u2019t prepare itself for aspiration during `pick_up_tip()`, and will\ninstead always prepare during `aspirate()`. Version 2\\.12 and earlier\nwill raise an `APIVersionError` if a value is set for `prep_after`.\n\nChanged in version 2\\.19: Uses new values for how much a tip overlaps with the pipette nozzle.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\nprepare*to_aspirate(\\_self*) \u2192 'None'\nPrepare a pipette for aspiration.\n\nBefore a pipette can aspirate into an empty tip, the plunger must be in its\nbottom position. After dropping a tip or blowing out, the plunger will be in a\ndifferent position. This function moves the plunger to the bottom position,\nregardless of its current position, to make sure that the pipette is ready to\naspirate.\n\nYou rarely need to call this function. The API automatically prepares the\npipette for aspiration as part of other commands:\n\n> - After picking up a tip with `pick_up_tip()`.\n> - When calling `aspirate()`, if the pipette isn\u2019t already prepared.\n>   If the pipette is in a well, it will move out of the well, move the plunger,\n>   and then move back.\n\nUse `prepare_to_aspirate` when you need to control exactly when the plunger\nmotion will happen. A common use case is a pre\\-wetting routine, which requires\npreparing for aspiration, moving into a well, and then aspirating _without\nleaving the well_:\n\n```\npipette.move_to(well.bottom(z=2))\npipette.delay(5)\npipette.mix(10, 10)\npipette.move_to(well.top(z=5))\npipette.blow_out()\npipette.prepare_to_aspirate()\npipette.move_to(well.bottom(z=2))\npipette.delay(5)\npipette.aspirate(10, well.bottom(z=2))\n\n```\n\nThe call to `prepare_to_aspirate()` means that the plunger will be in the\nbottom position before the call to `aspirate()`. Since it doesn\u2019t need to\nprepare again, it will not move up out of the well to move the plunger. It will\naspirate in place.\n\nNew in version 2\\.16\\.\n\nrequire*liquid_presence(\\_self*, _well: 'labware.Well'_) \u2192 'None'\nIf there is no liquid in a well, raise an error.\n\nReturns:\nNone.\n\nNew in version 2\\.20\\.\n\nreset*tipracks(\\_self*) \u2192 'None'\nReload all tips in each tip rack and reset the starting tip.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 23741, "end_char_idx": 27462, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebe419bd-5a6e-41f3-8c29-1522cbb5495b": {"__data__": {"id_": "ebe419bd-5a6e-41f3-8c29-1522cbb5495b", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4c2e637-bf95-40cb-b4de-78de8b49b6b9", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "6068e8d42e7a824307b827c994e6e6b7a5e9984521b9f3ca0c33a04f15080f45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1abdb350-e5f4-4c81-942a-1105d3053d74", "node_type": "1", "metadata": {}, "hash": "a698418784a119fb29f436f27ce893efb0b88bdccaea780df94ee44ea0e4660a", "class_name": "RelatedNodeInfo"}}, "text": "Since it doesn\u2019t need to\nprepare again, it will not move up out of the well to move the plunger. It will\naspirate in place.\n\nNew in version 2\\.16\\.\n\nrequire*liquid_presence(\\_self*, _well: 'labware.Well'_) \u2192 'None'\nIf there is no liquid in a well, raise an error.\n\nReturns:\nNone.\n\nNew in version 2\\.20\\.\n\nreset*tipracks(\\_self*) \u2192 'None'\nReload all tips in each tip rack and reset the starting tip.\n\nNew in version 2\\.0\\.\n\n_property_ return_height*: float')*\nThe height to return a tip to its tip rack.\n\nReturns:\nA scaling factor to apply to the tip length.\nDuring `drop_tip()`, this factor is multiplied by the tip\nlength to get the distance from the top of the well to drop the tip.\n\nNew in version 2\\.2\\.\n\nreturn*tip(\\_self*, _home_after: 'Optional\\[bool]' \\= None_) \u2192 'InstrumentContext'\nDrop the currently attached tip in its original location in the tip rack.\n\nReturning a tip does not reset tip tracking, so `Well.has_tip` will\nremain `False` for the destination.\n\nReturns:\nThis instance.\n\nParameters:\n**home_after** \u2013 See the `home_after` parameter of `drop_tip()`.\n\nNew in version 2\\.0\\.\n\n_property_ speed*: PlungerSpeeds*\nThe speeds (in mm/s) configured for the pipette plunger.\n\nThis is an object with attributes `aspirate`, `dispense`, and `blow_out`\nholding the plunger speeds for the corresponding operation.\n\nNote\n\nSetting values of `flow_rate` will override the values in\n`speed`.\n\nChanged in version 2\\.14: This property has been removed because it\u2019s fundamentally misaligned with\nthe step\\-wise nature of a pipette\u2019s plunger speed configuration. Use\n`flow_rate` instead.\n\nNew in version 2\\.0\\.\n\n_property_ starting_tip*: Optional')\\[Well]*\nWhich well of a tip rack the pipette should start at when automatically choosing tips to pick up.\n\nSee `pick_up_tip()`.\n\nNote\n\nIn robot software versions 6\\.3\\.0 and 6\\.3\\.1, protocols specifying API level\n2\\.14 ignored `starting_tip` on the second and subsequent calls to\n`InstrumentContext.pick_up_tip()` with no argument. This is fixed\nfor all API levels as of robot software version 7\\.0\\.0\\.\n\nNew in version 2\\.0\\.\n\n_property_ tip_racks*: List')\\[Labware]*\nThe tip racks that have been linked to this pipette.\n\nThis is the property used to determine which tips to pick up next when calling\n`pick_up_tip()` without arguments. See Picking Up a Tip.\n\nNew in version 2\\.0\\.\n\ntouch*tip(\\_self*, _location: 'Optional\\[labware.Well]' \\= None_, _radius: 'float' \\= 1\\.0_, _v_offset: 'float' \\= \\- 1\\.0_, _speed: 'float' \\= 60\\.0_) \u2192 'InstrumentContext'\nTouch the pipette tip to the sides of a well, with the intent of removing leftover droplets.\n\nSee Touch Tip for more details and examples.\n\nParameters:\n\n- **location** (`Well` or `None`) \u2013 If no location is passed, the pipette will touch its tip at the\n  edges of the current well.\n- **radius** (_float_')) \u2013 How far to move, as a proportion of the target well\u2019s radius.\n  When `radius=1.0`, the pipette tip will move all the way to the\n  edge of the target well. When `radius=0.5`, it will move to 50%\n  of the well\u2019s radius. Default is 1\\.0 (100%)\n- **v_offset** (_float_')) \u2013 How far above or below the well to touch the tip, measured in mm.\n  A positive offset moves the tip higher above the well.\n  A negative offset moves the tip lower into the well.\n  Default is \\-1\\.0 mm.\n- **speed** (_float_')) \u2013 The speed for touch tip motion, in mm/s.\n\n  - Default: 60\\.0 mm/s\n  - Maximum: 80\\.0 mm/s\n  - Minimum: 1\\.0 mm/s\n\nRaises:\n`UnexpectedTipRemovalError` \u2013 If no tip is attached to the pipette.\n\nRaises:\n**RuntimeError**') \u2013 If no location is specified and the location cache is\n`None`.", "mimetype": "text/plain", "start_char_idx": 27041, "end_char_idx": 30637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1abdb350-e5f4-4c81-942a-1105d3053d74": {"__data__": {"id_": "1abdb350-e5f4-4c81-942a-1105d3053d74", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebe419bd-5a6e-41f3-8c29-1522cbb5495b", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "958839c2d3a5489f613693566dbe3df494e791d93e43035201e87d7a73447373", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3b48282-6282-4419-9b67-287f8516f532", "node_type": "1", "metadata": {}, "hash": "322b6be14366210fec60370b76f1b1076cba13b2d48f29a8e70b13b95075982c", "class_name": "RelatedNodeInfo"}}, "text": "When `radius=0.5`, it will move to 50%\n  of the well\u2019s radius. Default is 1\\.0 (100%)\n- **v_offset** (_float_')) \u2013 How far above or below the well to touch the tip, measured in mm.\n  A positive offset moves the tip higher above the well.\n  A negative offset moves the tip lower into the well.\n  Default is \\-1\\.0 mm.\n- **speed** (_float_')) \u2013 The speed for touch tip motion, in mm/s.\n\n  - Default: 60\\.0 mm/s\n  - Maximum: 80\\.0 mm/s\n  - Minimum: 1\\.0 mm/s\n\nRaises:\n`UnexpectedTipRemovalError` \u2013 If no tip is attached to the pipette.\n\nRaises:\n**RuntimeError**') \u2013 If no location is specified and the location cache is\n`None`. This should happen if `touch_tip` is called\nwithout first calling a method that takes a location, like\n`aspirate()` or `dispense()`.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\ntransfer(_self_, _volume: 'Union\\[float_, _Sequence\\[float]]'_, _source: 'AdvancedLiquidHandling'_, _dest: 'AdvancedLiquidHandling'_, _trash: 'bool' \\= True_, _\\\\\\*\\\\\\*kwargs: 'Any'_) \u2192 'InstrumentContext'\nMove liquid from one well or group of wells to another.\n\nTransfer is a higher\\-level command, incorporating other\n`InstrumentContext` commands, like `aspirate()` and\n`dispense()`. It makes writing a protocol easier at the cost of\nspecificity. See Complex Commands for details on how transfer and\nother complex commands perform their component steps.\n\nParameters:\n\n- **volume** \u2013 The amount, in \u00b5L, to aspirate from each source and dispense to\n  each destination. If `volume` is a list, each amount will be\n  used for the source and destination at the matching index. A list\n  item of `0` will skip the corresponding wells entirely. See\n  List of Volumes for details and examples.\n- **source** \u2013 A single well or a list of wells to aspirate liquid from.\n- **dest** \u2013 A single well or a list of wells to dispense liquid into.\n\nKeyword Arguments:\nTransfer accepts a number of optional parameters that give\nyou greater control over the exact steps it performs. See\nComplex Liquid Handling Parameters or the links under each argument\u2019s entry below for\nadditional details and examples.\n\n- **new_tip** (_string_) \u2013\n  When to pick up and drop tips during the command. Defaults to `\"once\"`.\n\n> - `\"once\"`: Use one tip for the entire command.\n>   - `\"always\"`: Use a new tip for each set of aspirate and dispense steps.\n>   - `\"never\"`: Do not pick up or drop tips at all.\n\nSee Tip Handling for details.\n\n- **trash** (_boolean_) \u2013\n  If `True` (default), the pipette will drop tips in its\n  `trash_container()`.\n  If `False`, the pipette will return tips to their tip rack.\n\nSee Trash Tips for details.\n\n- **touch_tip** (_boolean_) \u2013\n  If `True`, perform a `touch_tip()` following each\n  `aspirate()` and `dispense()`. Defaults to `False`.\n\nSee Touch Tip for details.\n\n- **blow_out** (_boolean_) \u2013\n  If `True`, a `blow_out()` will occur following each\n  `dispense()`, but only if the pipette has no liquid left\n  in it. If `False` (default), the pipette will not blow out liquid.\n\nSee Blow Out for details.\n\n- **blowout_location** (_string_) \u2013\n  Accepts one of three string values: `\"trash\"`, `\"source well\"`, or\n  `\"destination well\"`.\n\nIf `blow_out` is `False` (its default), this parameter is ignored.\n\nIf `blow_out` is `True` and this parameter is not set:\n\n> - Blow out into the trash, if the pipette is empty or only contains the\n>   disposal volume.\n>   - Blow out into the source well, if the pipette otherwise contains liquid.\n\n- **mix_before** (_tuple_) \u2013\n  Perform a `mix()` before each `aspirate()` during the\n  transfer. The first value of the tuple is the number of repetitions, and\n  the second value is the amount of liquid to mix in \u00b5L.\n\nSee Mix Before for details.", "mimetype": "text/plain", "start_char_idx": 30013, "end_char_idx": 33697, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3b48282-6282-4419-9b67-287f8516f532": {"__data__": {"id_": "f3b48282-6282-4419-9b67-287f8516f532", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130dd014-0595-4e8d-bce0-9a555e767c16", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a7c81847093aaa243bf266448ab81c1e71f0e4b75bc60769af6c579e197b8e3d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1abdb350-e5f4-4c81-942a-1105d3053d74", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e4bcdb1b61e2bf23454b397fa6b8f0fd51df7fa9a70e2eadbd6abdbdec979ba2", "class_name": "RelatedNodeInfo"}}, "text": "See Blow Out for details.\n\n- **blowout_location** (_string_) \u2013\n  Accepts one of three string values: `\"trash\"`, `\"source well\"`, or\n  `\"destination well\"`.\n\nIf `blow_out` is `False` (its default), this parameter is ignored.\n\nIf `blow_out` is `True` and this parameter is not set:\n\n> - Blow out into the trash, if the pipette is empty or only contains the\n>   disposal volume.\n>   - Blow out into the source well, if the pipette otherwise contains liquid.\n\n- **mix_before** (_tuple_) \u2013\n  Perform a `mix()` before each `aspirate()` during the\n  transfer. The first value of the tuple is the number of repetitions, and\n  the second value is the amount of liquid to mix in \u00b5L.\n\nSee Mix Before for details.\n\n- **mix_after** (_tuple_) \u2013\n  Perform a `mix()` after each `dispense()` during the\n  transfer. The first value of the tuple is the number of repetitions, and\n  the second value is the amount of liquid to mix in \u00b5L.\n\nSee Mix After for details.\n\n- **disposal_volume** (_float_) \u2013\n  Transfer ignores the numeric value of this parameter. If set, the pipette\n  will not aspirate additional liquid, but it will perform a very small blow\n  out after each dispense.\n\nSee Disposal Volume for details.\n\nReturns:\nThis instance.\n\nNew in version 2\\.0\\.\n\n_property_ trash_container*: Union')\\[Labware, TrashBin, WasteChute]*\nThe trash container associated with this pipette.\n\nThis is the property used to determine where to drop tips and blow out liquids\nwhen calling `drop_tip()` or `blow_out()` without arguments.\n\nYou can set this to a `Labware`, `TrashBin`, or `WasteChute`.\n\nThe default value depends on the robot type and API version:\n\n- `ProtocolContext.fixed_trash`, if it exists.\n- Otherwise, the first item previously loaded with\n  `ProtocolContext.load_trash_bin()` or\n  `ProtocolContext.load_waste_chute()`.\n\nChanged in version 2\\.16: Added support for `TrashBin` and `WasteChute` objects.\n\nNew in version 2\\.0\\.\n\n_property_ type*: str')*\n`'single'` if this is a 1\\-channel pipette, or `'multi'` otherwise.\n\nSee also `channels`, which can distinguish between 8\\-channel and 96\\-channel\npipettes.\n\nNew in version 2\\.0\\.\n\n_property_ well_bottom_clearance*: Clearances*\nThe distance above the bottom of a well to aspirate or dispense.\n\nThis is an object with attributes `aspirate` and `dispense`, describing the\ndefault height of the corresponding operation. The default is 1\\.0 mm for both\naspirate and dispense.\n\nWhen `aspirate()` or `dispense()` is given a `Well`\nrather than a full `Location`, the robot will move this distance\nabove the bottom of the well to aspirate or dispense.\n\nTo change, set the corresponding attribute:\n\n```\npipette.well_bottom_clearance.aspirate = 2\n\n```\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 32996, "end_char_idx": 35700, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55820e72-350c-4d01-97be-cdc60036974a": {"__data__": {"id_": "55820e72-350c-4d01-97be-cdc60036974a", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "bd6ca8ff0fc99626577d4ad165d7a337317d507e5e03b4866ac80d41287acb9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee", "node_type": "1", "metadata": {}, "hash": "5d6e22d43bdf68ca24b7820d1529e1ae252d2a1feba21ca7c9a52956f4c63d4a", "class_name": "RelatedNodeInfo"}}, "text": "Labware\n\n_class_ opentrons.protocol*api.Labware(\\_core: AbstractLabware\\[Any]*, _api_version: APIVersion_, _protocol_core: ProtocolCore_, _core_map: LoadedCoreMap_)\nThis class represents a piece of labware.\n\nLabware available in the API generally fall under two categories.\n\n> - Consumable labware: well plates, tubes in racks, reservoirs, tip racks, etc.\n> - Adapters: durable items that hold other labware, either on modules or directly\n>   on the deck.\n\nThe `Labware` class defines the physical geometry of the labware\nand provides methods for accessing wells within the labware.\n\nCreate `Labware` objects by calling the appropriate `load_labware()` method,\ndepending on where you are loading the labware. For example, to load labware on a\nThermocycler Module, use `ThermocyclerContext.load_labware()`. To load\nlabware directly on the deck, use `ProtocolContext.load_labware()`. See\nLoading Labware.\n\n_property_ api_version*: APIVersion*\nSee `ProtocolContext.api_version`.\n\nNew in version 2\\.0\\.\n\n_property_ calibrated_offset*: Point*\nThe front\\-left\\-bottom corner of the labware, including its labware offset.\n\nWhen running a protocol in the Opentrons App or on the touchscreen, Labware\nPosition Check sets the labware offset.\n\nNew in version 2\\.0\\.\n\n_property_ child*: Optional')\\[Labware]*\nThe labware (if any) present on this labware.\n\nNew in version 2\\.15\\.\n\ncolumns(_self_, _\\\\\\*args: 'Union\\[int_, _str]'_) \u2192 'List\\[List\\[Well]]'\nAccessor function to navigate through a labware by column.\n\nUse indexing to access individual columns or wells contained in the nested list.\nFor example, access column 1 with `labware.columns()[0]`.\nOn a standard 96\\-well plate, this will output a list of `Well`\nobjects containing A1 through H1\\.\n\nNote\n\nUsing args with this method is deprecated. Use indexing instead.\n\nIf your code uses args, they can be either strings or integers, but not a\nmix of the two. For example, `.columns(1, 4)` or `.columns(\"1\", \"4\")` is\nvalid, but `.columns(\"1\", 4)` is not.\n\nReturns:\nA list of column lists.\n\nNew in version 2\\.0\\.\n\ncolumns*by_index(\\_self*) \u2192 'Dict\\[str, List\\[Well]]'\n\nDeprecated since version 2\\.0: Use `columns_by_name()` instead.\n\nNew in version 2\\.0\\.\n\ncolumns*by_name(\\_self*) \u2192 'Dict\\[str, List\\[Well]]'\nAccessor function to navigate through a labware by column name.\n\nUse indexing to access individual columns or wells contained in the dictionary.\nFor example, access column 1 with `labware.columns_by_name()[\"1\"]`.\nOn a standard 96\\-well plate, this will output a list of `Well`\nobjects containing A1 through H1\\.\n\nReturns:\nDictionary of `Well` lists keyed by column name.\n\nNew in version 2\\.0\\.\n\n_property_ highest_z*: float')*\nThe z\\-coordinate of the highest single point anywhere on the labware.\n\nThis is taken from the `zDimension` property of the `dimensions` object in the\nlabware definition and takes into account the labware offset.\n\nNew in version 2\\.0\\.\n\n_property_ is_adapter*: bool')*\nWhether the labware behaves as an adapter.\n\nReturns `True` if the labware definition specifies `adapter` as one of the\nlabware\u2019s `allowedRoles`.\n\nNew in version 2\\.15\\.\n\n_property_ is_tiprack*: bool')*\nWhether the labware behaves as a tip rack.\n\nReturns `True` if the labware definition specifies `isTiprack` as `True`.\n\nNew in version 2\\.0\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad a compatible labware onto the labware using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee": {"__data__": {"id_": "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "bd6ca8ff0fc99626577d4ad165d7a337317d507e5e03b4866ac80d41287acb9c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55820e72-350c-4d01-97be-cdc60036974a", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "ec7b63f3f36a4c900b190e5b77a0a4490e7caa03d035746f035dd69536aaf5b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5a03af5-c467-47c4-96ff-3b15682d23bf", "node_type": "1", "metadata": {}, "hash": "d16e9a56c0e2bcbff8cb6909727e90772ca0c759831dc7150aa5e5a6635989dd", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.15\\.\n\n_property_ is_tiprack*: bool')*\nWhether the labware behaves as a tip rack.\n\nReturns `True` if the labware definition specifies `isTiprack` as `True`.\n\nNew in version 2\\.0\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad a compatible labware onto the labware using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a compatible labware onto the labware using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If specified,\n  this is how the labware will appear in the run log, Labware Position\n  Check, and elsewhere in the Opentrons App and on the touchscreen.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\n_property_ load_name*: str')*\nThe API load name of the labware definition.\n\nNew in version 2\\.0\\.\n\n_property_ magdeck_engage_height*: Optional')\\[float')]*\nReturn the default magnet engage height that\n`MagneticModuleContext.engage()` will use for this labware.\n\nWarning\n\nThis currently returns confusing and unpredictable results that do not\nnecessarily match what `MagneticModuleContext.engage()` will\nactually choose for its default height.\n\nThe confusion is related to how this height\u2019s units and origin point are\ndefined, and differences between Magnetic Module generations.\n\nFor now, we recommend you avoid accessing this property directly.\n\nNew in version 2\\.0\\.\n\n_property_ name*: str')*\nThe display name of the labware.\n\nIf you specified a value for `label` when loading the labware, `name` is\nthat value.\n\nOtherwise, it is the `load_name` of the labware.\n\nNew in version 2\\.0\\.\n\n_property_ parameters*: LabwareParameters*\nInternal properties of a labware including type and quirks.\n\nNew in version 2\\.0\\.\n\n_property_ parent*: Union\\[str'), Labware, ModuleTypes, OffDeckType]*\nWhere the labware is loaded.\n\nThis corresponds to the physical object that the labware _directly_ rests upon.\n\nReturns:\nIf the labware is directly on the robot\u2019s deck, the `str` name of the deck slot,\nlike `\"D1\"` (Flex) or `\"1\"` (OT\\-2\\). See Deck Slots.\n\nIf the labware is on a module, a module context.\n\nIf the labware is on a labware or adapter, a `Labware`.\n\nIf the labware is off\\-deck, `OFF_DECK`.\n\nChanged in version 2\\.14: Return type for module parent changed.\nFormerly, the API returned an internal geometry interface.\n\nChanged in version 2\\.15: Returns a `Labware` if the labware is loaded onto a labware/adapter.\nReturns `OFF_DECK` if the labware is off\\-deck.\nFormerly, if the labware was removed by using `del` on `deck`,\nthis would return where it was before its removal.\n\nNew in version 2\\.0\\.\n\n_property_ quirks*: List')\\[str')]*\nQuirks specific to this labware.\n\nNew in version 2\\.0\\.\n\nreset(_self_) \u2192 'None'\nReset tip tracking for a tip rack.\n\nAfter resetting, the API treats all wells on the rack as if they contain unused tips.\nThis is useful if you want to reuse tips after calling `return_tip()`.\n\nIf you need to physically replace an empty tip rack in the middle of your protocol,\nuse `move_labware()` instead. See The Off\\-Deck Location for an example.\n\nChanged in version 2\\.14: This method will raise an exception if you call it on a labware that isn\u2019t\na tip rack. Formerly, it would do nothing.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 3095, "end_char_idx": 6909, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5a03af5-c467-47c4-96ff-3b15682d23bf": {"__data__": {"id_": "c5a03af5-c467-47c4-96ff-3b15682d23bf", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "bd6ca8ff0fc99626577d4ad165d7a337317d507e5e03b4866ac80d41287acb9c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "21af4b40cc382dce449d62763440b214c2c3dd8e8e15d73072beab26db6f18c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "112f62c0-766e-43c9-ace3-b96969d9fadb", "node_type": "1", "metadata": {}, "hash": "b74c6bb7a3e757bef4a378140a747946bda6ad294d71098bb6b6e6b0e7c53d29", "class_name": "RelatedNodeInfo"}}, "text": "Formerly, if the labware was removed by using `del` on `deck`,\nthis would return where it was before its removal.\n\nNew in version 2\\.0\\.\n\n_property_ quirks*: List')\\[str')]*\nQuirks specific to this labware.\n\nNew in version 2\\.0\\.\n\nreset(_self_) \u2192 'None'\nReset tip tracking for a tip rack.\n\nAfter resetting, the API treats all wells on the rack as if they contain unused tips.\nThis is useful if you want to reuse tips after calling `return_tip()`.\n\nIf you need to physically replace an empty tip rack in the middle of your protocol,\nuse `move_labware()` instead. See The Off\\-Deck Location for an example.\n\nChanged in version 2\\.14: This method will raise an exception if you call it on a labware that isn\u2019t\na tip rack. Formerly, it would do nothing.\n\nNew in version 2\\.0\\.\n\nrows(_self_, _\\\\\\*args: 'Union\\[int_, _str]'_) \u2192 'List\\[List\\[Well]]'\nAccessor function to navigate through a labware by row.\n\nUse indexing to access individual rows or wells contained in the nested list.\nOn a standard 96\\-well plate, this will output a list of `Well`\nobjects containing A1 through A12\\.\n\nNote\n\nUsing args with this method is deprecated. Use indexing instead.\n\nIf your code uses args, they can be either strings or integers, but not a\nmix of the two. For example, `.rows(1, 4)` or `.rows(\"1\", \"4\")` is\nvalid, but `.rows(\"1\", 4)` is not.\n\nReturns:\nA list of row lists.\n\nNew in version 2\\.0\\.\n\nrows*by_index(\\_self*) \u2192 'Dict\\[str, List\\[Well]]'\n\nDeprecated since version 2\\.0: Use `rows_by_name()` instead.\n\nNew in version 2\\.0\\.\n\nrows*by_name(\\_self*) \u2192 'Dict\\[str, List\\[Well]]'\nAccessor function to navigate through a labware by row name.\n\nUse indexing to access individual rows or wells contained in the dictionary.\nFor example, access row A with `labware.rows_by_name()[\"A\"]`.\nOn a standard 96\\-well plate, this will output a list of `Well`\nobjects containing A1 through A12\\.\n\nReturns:\nDictionary of `Well` lists keyed by row name.\n\nNew in version 2\\.0\\.\n\nset*calibration(\\_self*, _delta: 'Point'_) \u2192 'None'\nAn internal, deprecated method used for updating the labware offset.\n\nDeprecated since version 2\\.14\\.\n\nset*offset(\\_self*, _x: 'float'_, _y: 'float'_, _z: 'float'_) \u2192 'None'\nSet the labware\u2019s position offset.\n\nThe offset is an x, y, z vector in deck coordinates\n(see Position Relative to the Deck).\n\nHow the motion system applies the offset depends on the API level of the protocol.\n\n| API level       | Offset behavior                                                                                                                                                                                                                                                                                                                       |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 2\\.12\u20132\\.13     | Offsets only apply to the exact `Labware` instance.                                                                                                                                                                                                               |\n| 2\\.14\u20132\\.17     | `set_offset()` is not available, and the API raises an error.                                                                                                                                                                                                                                                                         |\n| 2\\.18 and newer | _ Offsets apply to any labware of the same type, in the same on\\-deck location. _ Offsets can\u2019t be set on labware that is currently off\\-deck. \\* Offsets do not follow a labware instance when using `move_labware()`. |\n\nNote\n\nSetting offsets with this method will override any labware offsets set\nby running Labware Position Check in the Opentrons App.\n\nThis method is designed for use with mechanisms like\n`opentrons.execute.get_protocol_api`, which lack an interactive way\nto adjust labware offsets. (See Advanced Control.)\n\nChanged in version 2\\.14: Temporarily removed.\n\nChanged in version 2\\.18: Restored, and now applies to labware type\u2013location pairs.\n\nNew in version 2\\.12\\.\n\n_property_ tip_length*: float')*\nFor a tip rack labware, the length of the tips it holds, in mm.\n\nThis is taken from the `tipLength` property of the `parameters` object in the labware definition.\n\nThis method will raise an exception if you call it on a labware that isn\u2019t a tip rack.\n\nNew in version 2\\.0\\.\n\n_property_ uri*: str')*\nA string fully identifying the labware.", "mimetype": "text/plain", "start_char_idx": 6137, "end_char_idx": 10923, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "112f62c0-766e-43c9-ace3-b96969d9fadb": {"__data__": {"id_": "112f62c0-766e-43c9-ace3-b96969d9fadb", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e886adb-3bfa-459f-858e-dcd0ae10efb2", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "bd6ca8ff0fc99626577d4ad165d7a337317d507e5e03b4866ac80d41287acb9c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5a03af5-c467-47c4-96ff-3b15682d23bf", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "b6b448890e43f5eff876bc01a3f2d65c24bbd6b3c77e38345d1b05b5ae725776", "class_name": "RelatedNodeInfo"}}, "text": "This method is designed for use with mechanisms like\n`opentrons.execute.get_protocol_api`, which lack an interactive way\nto adjust labware offsets. (See Advanced Control.)\n\nChanged in version 2\\.14: Temporarily removed.\n\nChanged in version 2\\.18: Restored, and now applies to labware type\u2013location pairs.\n\nNew in version 2\\.12\\.\n\n_property_ tip_length*: float')*\nFor a tip rack labware, the length of the tips it holds, in mm.\n\nThis is taken from the `tipLength` property of the `parameters` object in the labware definition.\n\nThis method will raise an exception if you call it on a labware that isn\u2019t a tip rack.\n\nNew in version 2\\.0\\.\n\n_property_ uri*: str')*\nA string fully identifying the labware.\n\nThe URI has three parts and follows the pattern `\"namespace/load_name/version\"`.\nFor example, `opentrons/corning_96_wellplate_360ul_flat/2`.\n\nNew in version 2\\.0\\.\n\nwell(_self_, _idx: 'Union\\[int, str]'_) \u2192 'Well'\nDeprecated. Use result of `wells()` or `wells_by_name()`.\n\nNew in version 2\\.0\\.\n\nwells(_self_, _\\\\\\*args: 'Union\\[str_, _int]'_) \u2192 'List\\[Well]'\nAccessor function to navigate a labware top to bottom, left to right.\n\ni.e., this method returns a list ordered A1, B1, C1\u2026A2, B2, C2\u2026.\n\nUse indexing to access individual wells contained in the list.\nFor example, access well A1 with `labware.wells()[0]`.\n\nNote\n\nUsing args with this method is deprecated. Use indexing instead.\n\nIf your code uses args, they can be either strings or integers, but not a\nmix of the two. For example, `.wells(1, 4)` or `.wells(\"1\", \"4\")` is\nvalid, but `.wells(\"1\", 4)` is not.\n\nReturns:\nOrdered list of all wells in a labware.\n\nNew in version 2\\.0\\.\n\nwells*by_index(\\_self*) \u2192 'Dict\\[str, Well]'\n\nDeprecated since version 2\\.0: Use `wells_by_name()` or dict access instead.\n\nNew in version 2\\.0\\.\n\nwells*by_name(\\_self*) \u2192 'Dict\\[str, Well]'\nAccessor function used to navigate through a labware by well name.\n\nUse indexing to access individual wells contained in the dictionary.\nFor example, access well A1 with `labware.wells_by_name()[\"A1\"]`.\n\nReturns:\nDictionary of `Well` objects keyed by well name.\n\nNew in version 2\\.0\\.\n\n_class_ opentrons.protocol_api.TrashBin\nRepresents a Flex or OT\\-2 trash bin.\n\nSee `ProtocolContext.load_trash_bin()`.\n\ntop(_self_, _x: 'float' \\= 0_, _y: 'float' \\= 0_, _z: 'float' \\= 0_) \u2192 'TrashBin'\nAdd a location offset to a trash bin.\n\nThe default location (`x`, `y`, and `z` all set to `0`) is the center of\nthe bin on the x\\- and y\\-axes, and slightly below its physical top on the z\\-axis.\n\nOffsets can be positive or negative and are measured in mm.\nSee Position Relative to the Deck.\n\nNew in version 2\\.18\\.\n\n_class_ opentrons.protocol_api.WasteChute\nRepresents a Flex waste chute.\n\nSee `ProtocolContext.load_waste_chute()`.\n\ntop(_self_, _x: 'float' \\= 0_, _y: 'float' \\= 0_, _z: 'float' \\= 0_) \u2192 'WasteChute'\nAdd a location offset to a waste chute.\n\nThe default location (`x`, `y`, and `z` all set to `0`) is the center of\nthe chute\u2019s opening on the x\\- and y\\-axes, and slightly below its physical top\non the z\\-axis. See Waste Chute for more information on possible\nconfigurations of the chute.\n\nOffsets can be positive or negative and are measured in mm.\nSee Position Relative to the Deck.\n\nNew in version 2\\.18\\.", "mimetype": "text/plain", "start_char_idx": 10222, "end_char_idx": 13470, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e39682ef-e478-472e-8f0e-da1ed1b619f8": {"__data__": {"id_": "e39682ef-e478-472e-8f0e-da1ed1b619f8", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3856fcb1-a47f-4a47-9bf2-2f196e6f957b", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "1c1cc4587acf18b019b5844977db36b69c5a907670d876fcedaf089eb01d3ff8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e40803c-97a9-4b13-8bd8-aaa8a7840760", "node_type": "1", "metadata": {}, "hash": "cdadb62b24516c5cabb353e6b357eee7df71e1483136280119674f6d78402ee8", "class_name": "RelatedNodeInfo"}}, "text": "Wells and Liquids\n\n_class_ opentrons.protocol*api.Well(\\_parent: Labware*, _core: WellCore_, _api_version: APIVersion_)\nThe Well class represents a single well in a `Labware`. It provides parameters and functions for three major uses:\n\n> - Calculating positions relative to the well. See Position Relative to Labware for details.\n> - Returning well measurements. See Well Dimensions for details.\n> - Specifying what liquid should be in the well at the beginning of a protocol. See Labeling Liquids in Wells for details.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\nbottom(_self_, _z: 'float' \\= 0\\.0_) \u2192 'Location'\n\nParameters:\n**z** \u2013 An offset on the z\\-axis, in mm. Positive offsets are higher and\nnegative offsets are lower.\n\nReturns:\nA `Location` corresponding to the\nabsolute position of the bottom\\-center of the well, plus the `z` offset\n(if specified).\n\nNew in version 2\\.0\\.\n\ncenter(_self_) \u2192 'Location'\n\nReturns:\nA `Location` corresponding to the\nabsolute position of the center of the well (in all three dimensions).\n\nNew in version 2\\.0\\.\n\n_property_ depth*: float')*\nThe depth, in mm, of a well along the z\\-axis, from the very top of the well to\nthe very bottom.\n\nNew in version 2\\.9\\.\n\n_property_ diameter*: Optional')\\[float')]*\nThe diameter, in mm, of a circular well. Returns `None`\nif the well is not circular.\n\nNew in version 2\\.0\\.\n\n_property_ display_name*: str')*\nA human\\-readable name for the well, including labware and deck location.\n\nFor example, \u201cA1 of Corning 96 Well Plate 360 \u00b5L Flat on slot D1\u201d. Run log\nentries use this format for identifying wells. See\n`ProtocolContext.commands()`.\n\nfrom*center_cartesian(\\_self*, _x: 'float'_, _y: 'float'_, _z: 'float'_) \u2192 'Point'\nSpecifies a `Point` based on fractions of the\ndistance from the center of the well to the edge along each axis.\n\nFor example, `from_center_cartesian(0, 0, 0.5)` specifies a point at the\nwell\u2019s center on the x\\- and y\\-axis, and half of the distance from the center of\nthe well to its top along the z\\-axis. To move the pipette to that location,\nconstruct a `Location` relative to the same well:\n\n```\nlocation = types.Location(\n    plate[\"A1\"].from_center_cartesian(0, 0, 0.5), plate[\"A1\"]\n)\npipette.move_to(location)\n\n```\n\nSee Points and Locations for more information.\n\nParameters:\n\n- **x** \u2013 The fraction of the distance from the well\u2019s center to its edge\n  along the x\\-axis. Negative values are to the left, and positive values\n  are to the right.\n- **y** \u2013 The fraction of the distance from the well\u2019s center to its edge\n  along the y\\-axis. Negative values are to the front, and positive values\n  are to the back.\n- **z** \u2013 The fraction of the distance from the well\u2019s center to its edge\n  along the x\\-axis. Negative values are down, and positive values are up.\n\nReturns:\nA `Point` representing the specified\nposition in absolute deck coordinates.\n\nNote\n\nEven if the absolute values of `x`, `y`, and `z` are all less\nthan 1, a location constructed from the well and the result of\n`from_center_cartesian` may be outside of the physical well. For example,\n`from_center_cartesian(0.9, 0.9, 0)` would be outside of a cylindrical\nwell, but inside a square well.\n\nNew in version 2\\.8\\.\n\n_property_ has_tip*: bool')*\nWhether this well contains a tip. Always `False` if the parent labware\nisn\u2019t a tip rack.\n\nNew in version 2\\.0\\.\n\n_property_ length*: Optional')\\[float')]*\nThe length, in mm, of a rectangular well along the x\\-axis (left to right).\nReturns `None` if the well is not rectangular.\n\nNew in version 2\\.9\\.\n\nload*liquid(\\_self*, _liquid: 'Liquid'_, _volume: 'float'_) \u2192 'None'\nLoad a liquid into a well.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e40803c-97a9-4b13-8bd8-aaa8a7840760": {"__data__": {"id_": "4e40803c-97a9-4b13-8bd8-aaa8a7840760", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3856fcb1-a47f-4a47-9bf2-2f196e6f957b", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "1c1cc4587acf18b019b5844977db36b69c5a907670d876fcedaf089eb01d3ff8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e39682ef-e478-472e-8f0e-da1ed1b619f8", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "37b3cb2a0fbf7a84b489cca9326d792b547a0413c733f77d10091c151d44ff3c", "class_name": "RelatedNodeInfo"}}, "text": "For example,\n`from_center_cartesian(0.9, 0.9, 0)` would be outside of a cylindrical\nwell, but inside a square well.\n\nNew in version 2\\.8\\.\n\n_property_ has_tip*: bool')*\nWhether this well contains a tip. Always `False` if the parent labware\nisn\u2019t a tip rack.\n\nNew in version 2\\.0\\.\n\n_property_ length*: Optional')\\[float')]*\nThe length, in mm, of a rectangular well along the x\\-axis (left to right).\nReturns `None` if the well is not rectangular.\n\nNew in version 2\\.9\\.\n\nload*liquid(\\_self*, _liquid: 'Liquid'_, _volume: 'float'_) \u2192 'None'\nLoad a liquid into a well.\n\nParameters:\n\n- **liquid** (_Liquid_) \u2013 The liquid to load into the well.\n- **volume** (_float_')) \u2013 The volume of liquid to load, in \u00b5L.\n\nNew in version 2\\.14\\.\n\n_property_ max_volume*: float')*\nThe maximum volume, in \u00b5L, that the well can hold.\n\nThis amount is set by the JSON labware definition, specifically the `totalLiquidVolume` property of the particular well.\n\n_property_ parent*: Labware*\nThe `Labware` object that the well is a part of.\n\nNew in version 2\\.0\\.\n\ntop(_self_, _z: 'float' \\= 0\\.0_) \u2192 'Location'\n\nParameters:\n**z** \u2013 An offset on the z\\-axis, in mm. Positive offsets are higher and\nnegative offsets are lower.\n\nReturns:\nA `Location` corresponding to the\nabsolute position of the top\\-center of the well, plus the `z` offset\n(if specified).\n\nNew in version 2\\.0\\.\n\n_property_ well_name*: str')*\nA string representing the well\u2019s coordinates.\n\nFor example, \u201cA1\u201d or \u201cH12\u201d.\n\nThe format of strings that this property returns is the same format as the key\nfor accessing wells in a dictionary.\n\nNew in version 2\\.7\\.\n\n_property_ width*: Optional')\\[float')]*\nThe width, in mm, of a rectangular well along the y\\-axis (front to back).\nReturns `None` if the well is not rectangular.\n\nNew in version 2\\.9\\.\n\n_class_ opentrons.protocol*api.Liquid(*\\_id: str')_, \\_name: str')_, _description: Optional')\\[str')]_, _display_color: Optional')\\[str')]_)\nA liquid to load into a well.\n\nname\nA human\\-readable name for the liquid.\n\nType:\nstr')\n\ndescription\nAn optional description.\n\nType:\nOptional\\[str')]\n\ndisplay_color\nAn optional display color for the liquid.\n\nType:\nOptional\\[str')]\n\nNew in version 2\\.14\\.", "mimetype": "text/plain", "start_char_idx": 3070, "end_char_idx": 5252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1cf7a8c-2071-4d9a-a0bb-f6b3664fb968": {"__data__": {"id_": "f1cf7a8c-2071-4d9a-a0bb-f6b3664fb968", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "527cc4e9-d27e-46b1-9faf-1052b2b76ba0", "node_type": "1", "metadata": {}, "hash": "f33e1794aa0d9a63a6f19823c253675b298fd20fea286897cf7426a4877af69f", "class_name": "RelatedNodeInfo"}}, "text": "Modules\n\n_class_ opentrons.protocol*api.HeaterShakerContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a connected Heater\\-Shaker Module.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.13\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\nclose*labware_latch(\\_self*) \u2192 'None'\nCloses the labware latch.\n\nThe labware latch needs to be closed using this method before sending a shake command,\neven if the latch was manually closed before starting the protocol.\n\nNew in version 2\\.13\\.\n\n_property_ current_speed*: int')*\nThe current speed of the Heater\\-Shaker\u2019s plate in rpm.\n\nNew in version 2\\.13\\.\n\n_property_ current_temperature*: float')*\nThe current temperature of the Heater\\-Shaker\u2019s plate in \u00b0C.\n\nReturns `23` in simulation if no target temperature has been set.\n\nNew in version 2\\.13\\.\n\ndeactivate*heater(\\_self*) \u2192 'None'\nStops heating.\n\nThe module will passively cool to room temperature.\nThe Heater\\-Shaker does not have active cooling.\n\nNew in version 2\\.13\\.\n\ndeactivate*shaker(\\_self*) \u2192 'None'\nStops shaking.\n\nDecelerating to 0 rpm typically only takes a few seconds.\n\nNew in version 2\\.13\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\n_property_ labware_latch_status*: str')*\nOne of six possible latch statuses:\n\n- `opening` \u2013 The latch is currently opening (in motion).\n- `idle_open` \u2013 The latch is open and not moving.\n- `closing` \u2013 The latch is currently closing (in motion).\n- `idle_closed` \u2013 The latch is closed and not moving.\n- `idle_unknown` \u2013 The default status upon reset, regardless of physical latch position.\n  Use `close_labware_latch()` before other commands\n  requiring confirmation that the latch is closed.\n- `unknown` \u2013 The latch status can\u2019t be determined.\n\nNew in version 2\\.13\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "527cc4e9-d27e-46b1-9faf-1052b2b76ba0": {"__data__": {"id_": "527cc4e9-d27e-46b1-9faf-1052b2b76ba0", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1cf7a8c-2071-4d9a-a0bb-f6b3664fb968", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "845bd61174299cb429fcab3b34066fdd566bcd980c21bdade22aca00ea0dedf6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33a52153-0b96-43ff-a3fc-bc2546b70869", "node_type": "1", "metadata": {}, "hash": "6818c0ce2edd4e9977bb8a61be132c28ee2eb77cf1c60226397ef1c615873f25", "class_name": "RelatedNodeInfo"}}, "text": "The parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.\n\n_property_ model*: Union')\\[Literal')\\'magneticModuleV1', 'magneticModuleV2'], [Literal')\\'temperatureModuleV1', 'temperatureModuleV2'], [Literal')\\'thermocyclerModuleV1', 'thermocyclerModuleV2'], [Literal')\\'heaterShakerModuleV1'], [Literal')\\'magneticBlockV1'], [Literal')\\['absorbanceReaderV1']]*\nGet the module\u2019s model identifier.\n\nNew in version 2\\.14\\.\n\nopen*labware_latch(\\_self*) \u2192 'None'\nOpen the Heater\\-Shaker\u2019s labware latch.\n\nThe labware latch needs to be closed before:\\* Shaking\n\n- Pipetting to or from the labware on the Heater\\-Shaker\n- Pipetting to or from labware to the left or right of the Heater\\-Shaker\n\nAttempting to open the latch while the Heater\\-Shaker is shaking will raise an error.\n\nNote\n\nBefore opening the latch, this command will retract the pipettes upward\nif they are parked adjacent to the left or right of the Heater\\-Shaker.\n\nNew in version 2\\.13\\.\n\n_property_ parent*: str')*\nThe name of the slot the module is on.\n\nOn a Flex, this will be like `\"D1\"`. On an OT\\-2, this will be like `\"1\"`.\nSee Deck Slots.\n\nNew in version 2\\.14\\.\n\n_property_ serial_number*: str')*\nGet the module\u2019s unique hardware serial number.\n\nNew in version 2\\.14\\.\n\nset*and_wait_for_shake_speed(\\_self*, _rpm: 'int'_) \u2192 'None'\nSet a shake speed in rpm and block execution of further commands until the module reaches the target.\n\nReaching a target shake speed typically only takes a few seconds.\n\nNote\n\nBefore shaking, this command will retract the pipettes upward if they are parked adjacent to the Heater\\-Shaker.\n\nParameters:\n**rpm** \u2013 A value between 200 and 3000, representing the target shake speed in revolutions per minute.\n\nNew in version 2\\.13\\.\n\nset*and_wait_for_temperature(\\_self*, _celsius: 'float'_) \u2192 'None'\nSet a target temperature and wait until the module reaches the target.\n\nNo other protocol commands will execute while waiting for the temperature.\n\nParameters:\n**celsius** \u2013 A value between 27 and 95, representing the target temperature in \u00b0C.\nValues are automatically truncated to two decimal places,\nand the Heater\\-Shaker module has a temperature accuracy of \u00b10\\.5 \u00b0C.\n\nNew in version 2\\.13\\.\n\nset*target_temperature(\\_self*, _celsius: 'float'_) \u2192 'None'\nSet target temperature and return immediately.\n\nSets the Heater\\-Shaker\u2019s target temperature and returns immediately without\nwaiting for the target to be reached. Does not delay the protocol until\ntarget temperature has reached.\nUse `wait_for_temperature()` to delay\nprotocol execution.\n\nParameters:\n**celsius** \u2013 A value between 27 and 95, representing the target temperature in \u00b0C.\nValues are automatically truncated to two decimal places,\nand the Heater\\-Shaker module has a temperature accuracy of \u00b10\\.5 \u00b0C.\n\nNew in version 2\\.13\\.", "mimetype": "text/plain", "start_char_idx": 3128, "end_char_idx": 6977, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33a52153-0b96-43ff-a3fc-bc2546b70869": {"__data__": {"id_": "33a52153-0b96-43ff-a3fc-bc2546b70869", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "527cc4e9-d27e-46b1-9faf-1052b2b76ba0", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "d201d132f050ac538b6274c529671cdc54022b80e155068b3a5ef274541bab02", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56eec31c-5c40-416e-81fd-7c7a6722f005", "node_type": "1", "metadata": {}, "hash": "9c92920cb3e3669081f6530959da935208168e9165892c996eab8a7cdec608e5", "class_name": "RelatedNodeInfo"}}, "text": "Parameters:\n**celsius** \u2013 A value between 27 and 95, representing the target temperature in \u00b0C.\nValues are automatically truncated to two decimal places,\nand the Heater\\-Shaker module has a temperature accuracy of \u00b10\\.5 \u00b0C.\n\nNew in version 2\\.13\\.\n\nset*target_temperature(\\_self*, _celsius: 'float'_) \u2192 'None'\nSet target temperature and return immediately.\n\nSets the Heater\\-Shaker\u2019s target temperature and returns immediately without\nwaiting for the target to be reached. Does not delay the protocol until\ntarget temperature has reached.\nUse `wait_for_temperature()` to delay\nprotocol execution.\n\nParameters:\n**celsius** \u2013 A value between 27 and 95, representing the target temperature in \u00b0C.\nValues are automatically truncated to two decimal places,\nand the Heater\\-Shaker module has a temperature accuracy of \u00b10\\.5 \u00b0C.\n\nNew in version 2\\.13\\.\n\n_property_ speed_status*: str')*\nOne of five possible shaking statuses:\n\n- `holding at target` \u2013 The module has reached its target shake speed\n  and is actively maintaining that speed.\n- `speeding up` \u2013 The module is increasing its shake speed towards a target.\n- `slowing down` \u2013 The module was previously shaking at a faster speed\n  and is currently reducing its speed to a lower target or to deactivate.\n- `idle` \u2013 The module is not shaking.\n- `error` \u2013 The shaking status can\u2019t be determined.\n\nNew in version 2\\.13\\.\n\n_property_ target_speed*: Optional')\\[int')]*\nTarget speed of the Heater\\-Shaker\u2019s plate in rpm.\n\nNew in version 2\\.13\\.\n\n_property_ target_temperature*: Optional')\\[float')]*\nThe target temperature of the Heater\\-Shaker\u2019s plate in \u00b0C.\n\nReturns `None` if no target has been set.\n\nNew in version 2\\.13\\.\n\n_property_ temperature_status*: str')*\nOne of five possible temperature statuses:\n\n- `holding at target` \u2013 The module has reached its target temperature\n  and is actively maintaining that temperature.\n- `cooling` \u2013 The module has previously heated and is now passively cooling.\n  The Heater\\-Shaker does not have active cooling.\n- `heating` \u2013 The module is heating to a target temperature.\n- `idle` \u2013 The module has not heated since the beginning of the protocol.\n- `error` \u2013 The temperature status can\u2019t be determined.\n\nNew in version 2\\.13\\.\n\n_property_ type*: Union')\\[Literal')\\'magneticModuleType'], [Literal')\\'temperatureModuleType'], [Literal')\\'thermocyclerModuleType'], [Literal')\\'heaterShakerModuleType'], [Literal')\\'magneticBlockType'], [Literal')\\['absorbanceReaderType']]*\nGet the module\u2019s general type identifier.\n\nNew in version 2\\.14\\.\n\nwait*for_temperature(\\_self*) \u2192 'None'\nDelays protocol execution until the Heater\\-Shaker has reached its target\ntemperature.\n\nRaises an error if no target temperature was previously set.\n\nNew in version 2\\.13\\.\n\n_class_ opentrons.protocol*api.MagneticBlockContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a Magnetic Block.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.15\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.", "mimetype": "text/plain", "start_char_idx": 6132, "end_char_idx": 10282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56eec31c-5c40-416e-81fd-7c7a6722f005": {"__data__": {"id_": "56eec31c-5c40-416e-81fd-7c7a6722f005", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33a52153-0b96-43ff-a3fc-bc2546b70869", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "5afec27c4f201f14217a4865b18311fe717693348c26f9c3cd3a901d021ff9c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3", "node_type": "1", "metadata": {}, "hash": "dfc4dffa3941d3eec2f0ccfd520abddd58289d37c26a23a1b2f8b9d887a87b4a", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.\n\n_property_ model*: Union')\\[Literal')\\'magneticModuleV1', 'magneticModuleV2'], [Literal')\\'temperatureModuleV1', 'temperatureModuleV2'], [Literal')\\'thermocyclerModuleV1', 'thermocyclerModuleV2'], [Literal')\\'heaterShakerModuleV1'], [Literal')\\'magneticBlockV1'], [Literal')\\['absorbanceReaderV1']]*\nGet the module\u2019s model identifier.\n\nNew in version 2\\.14\\.\n\n_property_ parent*: str')*\nThe name of the slot the module is on.\n\nOn a Flex, this will be like `\"D1\"`. On an OT\\-2, this will be like `\"1\"`.\nSee Deck Slots.\n\nNew in version 2\\.14\\.\n\n_property_ type*: Union')\\[Literal')\\'magneticModuleType'], [Literal')\\'temperatureModuleType'], [Literal')\\'thermocyclerModuleType'], [Literal')\\'heaterShakerModuleType'], [Literal')\\'magneticBlockType'], [Literal')\\['absorbanceReaderType']]*\nGet the module\u2019s general type identifier.\n\nNew in version 2\\.14\\.\n\n_class_ opentrons.protocol*api.MagneticModuleContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a connected Magnetic Module.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\ndisengage(_self_) \u2192 'None'\nLower the magnets back into the Magnetic Module.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 9492, "end_char_idx": 13151, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3": {"__data__": {"id_": "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56eec31c-5c40-416e-81fd-7c7a6722f005", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "ab99552145816f7d8d8596a43c16493b4e2e7e434d70ce598aa8b51b8be07ab8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98338da6-5a0a-4653-89be-314b1cc2ff25", "node_type": "1", "metadata": {}, "hash": "26a4f11f62418aad358b26ba4734b45217619d17f6ba67cd05c6bf8ed7d180e0", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.14\\.\n\n_class_ opentrons.protocol*api.MagneticModuleContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a connected Magnetic Module.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\ndisengage(_self_) \u2192 'None'\nLower the magnets back into the Magnetic Module.\n\nNew in version 2\\.0\\.\n\nengage(_self_, _height: 'Optional\\[float]' \\= None_, _offset: 'Optional\\[float]' \\= None_, _height_from_base: 'Optional\\[float]' \\= None_) \u2192 'None'\nRaise the Magnetic Module\u2019s magnets. You can specify how high the magnets\nshould move:\n\n> - No parameter: Move to the default height for the loaded labware. If\n>   the loaded labware has no default, or if no labware is loaded, this will\n>   raise an error.\n> - `height_from_base` \u2013 Move this many millimeters above the bottom\n>   of the labware. Acceptable values are between `0` and `25`.\n>\n> This is the recommended way to adjust the magnets\u2019 height.\n>\n> New in version 2\\.2\\.\n>\n> - `offset` \u2013 Move this many millimeters above (positive value) or below\n>   (negative value) the default height for the loaded labware. The sum of\n>   the default height and `offset` must be between 0 and 25\\.\n> - `height` \u2013 Intended to move this many millimeters above the magnets\u2019\n>   home position. However, depending on the generation of module and the loaded\n>   labware, this may produce unpredictable results. You should normally use\n>   `height_from_base` instead.\n>\n> Changed in version 2\\.14: This parameter has been removed.\n\nYou shouldn\u2019t specify more than one of these parameters. However, if you do,\ntheir order of precedence is `height`, then `height_from_base`, then `offset`.\n\nNew in version 2\\.0\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.", "mimetype": "text/plain", "start_char_idx": 12489, "end_char_idx": 16246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98338da6-5a0a-4653-89be-314b1cc2ff25": {"__data__": {"id_": "98338da6-5a0a-4653-89be-314b1cc2ff25", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "0a0cc3bd0a2f7151ad743361a1163578790a24c46f3fc576c80d640286f77e0e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "515d7962-e18d-4b3d-8b44-345f171c1de2", "node_type": "1", "metadata": {}, "hash": "42fe37abddb15525ddc40d022c610c2e4577f92289d301461082a1f23e6932bf", "class_name": "RelatedNodeInfo"}}, "text": "The parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.\n\n_property_ model*: Union')\\[Literal')\\'magneticModuleV1', 'magneticModuleV2'], [Literal')\\'temperatureModuleV1', 'temperatureModuleV2'], [Literal')\\'thermocyclerModuleV1', 'thermocyclerModuleV2'], [Literal')\\'heaterShakerModuleV1'], [Literal')\\'magneticBlockV1'], [Literal')\\['absorbanceReaderV1']]*\nGet the module\u2019s model identifier.\n\nNew in version 2\\.14\\.\n\n_property_ parent*: str')*\nThe name of the slot the module is on.\n\nOn a Flex, this will be like `\"D1\"`. On an OT\\-2, this will be like `\"1\"`.\nSee Deck Slots.\n\nNew in version 2\\.14\\.\n\n_property_ serial_number*: str')*\nGet the module\u2019s unique hardware serial number.\n\nNew in version 2\\.14\\.\n\n_property_ status*: str')*\nThe status of the module, either `engaged` or `disengaged`.\n\nNew in version 2\\.0\\.\n\n_property_ type*: Union')\\[Literal')\\'magneticModuleType'], [Literal')\\'temperatureModuleType'], [Literal')\\'thermocyclerModuleType'], [Literal')\\'heaterShakerModuleType'], [Literal')\\'magneticBlockType'], [Literal')\\['absorbanceReaderType']]*\nGet the module\u2019s general type identifier.\n\nNew in version 2\\.14\\.\n\n_class_ opentrons.protocol*api.TemperatureModuleContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a connected Temperature Module.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\ndeactivate(_self_) \u2192 'None'\nStop heating or cooling, and turn off the fan.\n\nNew in version 2\\.0\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.", "mimetype": "text/plain", "start_char_idx": 15638, "end_char_idx": 19353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "515d7962-e18d-4b3d-8b44-345f171c1de2": {"__data__": {"id_": "515d7962-e18d-4b3d-8b44-345f171c1de2", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98338da6-5a0a-4653-89be-314b1cc2ff25", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "31bd27fe1bb990c4105354d53c4334dea2eb18c4e1f7ccda5f0a13cf04517e63", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1062af75-9e40-499f-9e34-18c8074da7a8", "node_type": "1", "metadata": {}, "hash": "abf85106e90bcbfa2cda570c84d40b9db2aebe2aaf749e107ab511da4a9784a0", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.\n\n_property_ model*: Union')\\[Literal')\\'magneticModuleV1', 'magneticModuleV2'], [Literal')\\'temperatureModuleV1', 'temperatureModuleV2'], [Literal')\\'thermocyclerModuleV1', 'thermocyclerModuleV2'], [Literal')\\'heaterShakerModuleV1'], [Literal')\\'magneticBlockV1'], [Literal')\\['absorbanceReaderV1']]*\nGet the module\u2019s model identifier.\n\nNew in version 2\\.14\\.\n\n_property_ parent*: str')*\nThe name of the slot the module is on.\n\nOn a Flex, this will be like `\"D1\"`. On an OT\\-2, this will be like `\"1\"`.\nSee Deck Slots.\n\nNew in version 2\\.14\\.\n\n_property_ serial_number*: str')*\nGet the module\u2019s unique hardware serial number.\n\nNew in version 2\\.14\\.\n\nset*temperature(\\_self*, _celsius: 'float'_) \u2192 'None'\nSet a target temperature and wait until the module reaches the target.\n\nNo other protocol commands will execute while waiting for the temperature.\n\nParameters:\n**celsius** \u2013 A value between 4 and 95, representing the target temperature in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ status*: str')*\nOne of four possible temperature statuses:\n\n- `holding at target` \u2013 The module has reached its target temperature\n  and is actively maintaining that temperature.\n- `cooling` \u2013 The module is cooling to a target temperature.\n- `heating` \u2013 The module is heating to a target temperature.\n- `idle` \u2013 The module has been deactivated.\n\nNew in version 2\\.3\\.\n\n_property_ target*: Optional')\\[float')]*\nThe target temperature of the Temperature Module\u2019s deck in \u00b0C.\n\nReturns `None` if no target has been set.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 18563, "end_char_idx": 22250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1062af75-9e40-499f-9e34-18c8074da7a8": {"__data__": {"id_": "1062af75-9e40-499f-9e34-18c8074da7a8", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "515d7962-e18d-4b3d-8b44-345f171c1de2", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "c03ff33e0ea04de25bb721187fa04501d3588be97ffb706d83a6d0b59483732a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e559f16b-b79d-497c-83c3-1040b7290ab2", "node_type": "1", "metadata": {}, "hash": "c198c7022929bfcd0d37dd31fa5a478db5633a2be3b084ddab2738a1c5a1e631", "class_name": "RelatedNodeInfo"}}, "text": "No other protocol commands will execute while waiting for the temperature.\n\nParameters:\n**celsius** \u2013 A value between 4 and 95, representing the target temperature in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ status*: str')*\nOne of four possible temperature statuses:\n\n- `holding at target` \u2013 The module has reached its target temperature\n  and is actively maintaining that temperature.\n- `cooling` \u2013 The module is cooling to a target temperature.\n- `heating` \u2013 The module is heating to a target temperature.\n- `idle` \u2013 The module has been deactivated.\n\nNew in version 2\\.3\\.\n\n_property_ target*: Optional')\\[float')]*\nThe target temperature of the Temperature Module\u2019s deck in \u00b0C.\n\nReturns `None` if no target has been set.\n\nNew in version 2\\.0\\.\n\n_property_ temperature*: float')*\nThe current temperature of the Temperature Module\u2019s deck in \u00b0C.\n\nReturns `0` in simulation if no target temperature has been set.\n\nNew in version 2\\.0\\.\n\n_property_ type*: Union')\\[Literal')\\'magneticModuleType'], [Literal')\\'temperatureModuleType'], [Literal')\\'thermocyclerModuleType'], [Literal')\\'heaterShakerModuleType'], [Literal')\\'magneticBlockType'], [Literal')\\['absorbanceReaderType']]*\nGet the module\u2019s general type identifier.\n\nNew in version 2\\.14\\.\n\n_class_ opentrons.protocol*api.ThermocyclerContext(\\_core: AbstractModuleCore*, _protocol_core: AbstractProtocol\\[AbstractInstrument\\[AbstractWellCore], AbstractLabware\\[AbstractWellCore], AbstractModuleCore]_, _core_map: LoadedCoreMap_, _api_version: APIVersion_, _broker: LegacyBroker_)\nAn object representing a connected Thermocycler Module.\n\nIt should not be instantiated directly; instead, it should be\ncreated through `ProtocolContext.load_module()`.\n\nNew in version 2\\.0\\.\n\n_property_ api_version*: APIVersion*\n\nNew in version 2\\.0\\.\n\n_property_ block_target_temperature*: Optional')\\[float')]*\nThe target temperature of the well block in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ block_temperature*: Optional')\\[float')]*\nThe current temperature of the well block in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ block_temperature_status*: str')*\nOne of five possible temperature statuses:\n\n- `holding at target` \u2013 The block has reached its target temperature\n  and is actively maintaining that temperature.\n- `cooling` \u2013 The block is cooling to a target temperature.\n- `heating` \u2013 The block is heating to a target temperature.\n- `idle` \u2013 The block is not currently heating or cooling.\n- `error` \u2013 The temperature status can\u2019t be determined.\n\nNew in version 2\\.0\\.\n\nclose*lid(\\_self*) \u2192 'str'\nClose the lid.\n\nNew in version 2\\.0\\.\n\ndeactivate(_self_) \u2192 'None'\nTurn off both the well block temperature controller and the lid heater.\n\nNew in version 2\\.0\\.\n\ndeactivate*block(\\_self*) \u2192 'None'\nTurn off the well block temperature controller.\n\nNew in version 2\\.0\\.\n\ndeactivate*lid(\\_self*) \u2192 'None'\nTurn off the lid heater.\n\nNew in version 2\\.0\\.\n\nexecute*profile(\\_self*, _steps: 'List\\[ThermocyclerStep]'_, _repetitions: 'int'_, _block_max_volume: 'Optional\\[float]' \\= None_) \u2192 'None'\nExecute a Thermocycler profile, defined as a cycle of\n`steps`, for a given number of `repetitions`.\n\nParameters:\n\n- **steps** \u2013 List of unique steps that make up a single cycle.\n  Each list item should be a dictionary that maps to\n  the parameters of the `set_block_temperature()`\n  method with a `temperature` key, and either or both of\n  `hold_time_seconds` and `hold_time_minutes`.\n- **repetitions** \u2013 The number of times to repeat the cycled steps.\n- **block_max_volume** \u2013 The greatest volume of liquid contained in any\n  individual well of the loaded labware, in \u00b5L.\n  If not specified, the default is 25 \u00b5L.\n\nNew in version 2\\.0\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\n_property_ lid_position*: Optional')\\[str')]*\nOne of these possible lid statuses:\n\n- `closed` \u2013 The lid is closed.\n- `in_between` \u2013 The lid is neither open nor closed.", "mimetype": "text/plain", "start_char_idx": 21506, "end_char_idx": 25452, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e559f16b-b79d-497c-83c3-1040b7290ab2": {"__data__": {"id_": "e559f16b-b79d-497c-83c3-1040b7290ab2", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1062af75-9e40-499f-9e34-18c8074da7a8", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e550c65a5a23af01c46f207a498d836e7fd16f94d5380e6394fc70f583411618", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe0c19af-46e7-46d9-8fd6-66508ffc9f88", "node_type": "1", "metadata": {}, "hash": "3868b0995b0b03fe4e3cc4ab1f30a5b324723d520bceb28bdde7dffbfb1665bd", "class_name": "RelatedNodeInfo"}}, "text": "Each list item should be a dictionary that maps to\n  the parameters of the `set_block_temperature()`\n  method with a `temperature` key, and either or both of\n  `hold_time_seconds` and `hold_time_minutes`.\n- **repetitions** \u2013 The number of times to repeat the cycled steps.\n- **block_max_volume** \u2013 The greatest volume of liquid contained in any\n  individual well of the loaded labware, in \u00b5L.\n  If not specified, the default is 25 \u00b5L.\n\nNew in version 2\\.0\\.\n\n_property_ labware*: Optional')\\[Labware]*\nThe labware (if any) present on this module.\n\nNew in version 2\\.0\\.\n\n_property_ lid_position*: Optional')\\[str')]*\nOne of these possible lid statuses:\n\n- `closed` \u2013 The lid is closed.\n- `in_between` \u2013 The lid is neither open nor closed.\n- `open` \u2013 The lid is open.\n- `unknown` \u2013 The lid position can\u2019t be determined.\n\nNew in version 2\\.0\\.\n\n_property_ lid_target_temperature*: Optional')\\[float')]*\nThe target temperature of the lid in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ lid_temperature*: Optional')\\[float')]*\nThe current temperature of the lid in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ lid_temperature_status*: Optional')\\[str')]*\nOne of five possible temperature statuses:\n\n- `holding at target` \u2013 The lid has reached its target temperature\n  and is actively maintaining that temperature.\n- `cooling` \u2013 The lid has previously heated and is now passively cooling.The Thermocycler lid does not have active cooling.\n- `heating` \u2013 The lid is heating to a target temperature.\n- `idle` \u2013 The lid has not heated since the beginning of the protocol.\n- `error` \u2013 The temperature status can\u2019t be determined.\n\nNew in version 2\\.0\\.\n\nload*adapter(\\_self*, _name: 'str'_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\nLoad an adapter onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_adapter` (which loads adapters directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded adapter object.\n\nNew in version 2\\.15\\.\n\nload*adapter_from_definition(\\_self*, _definition: 'LabwareDefinition'_) \u2192 'Labware'\nLoad an adapter onto the module using an inline definition.\n\nParameters:\n**definition** \u2013 The labware definition.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.15\\.\n\nload*labware(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_, _adapter: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using its load parameters.\n\nThe parameters of this function behave like those of\n`ProtocolContext.load_labware` (which loads labware directly\nonto the deck). Note that the parameter `name` here corresponds to\n`load_name` on the `ProtocolContext` function.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.1: The _label,_ _namespace,_ and _version_ parameters.\n\nload*labware_by_name(\\_self*, _name: 'str'_, _label: 'Optional\\[str]' \\= None_, _namespace: 'Optional\\[str]' \\= None_, _version: 'Optional\\[int]' \\= None_) \u2192 'Labware'\n\nDeprecated since version 2\\.0: Use `load_labware()` instead.\n\nNew in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.", "mimetype": "text/plain", "start_char_idx": 24714, "end_char_idx": 28487, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe0c19af-46e7-46d9-8fd6-66508ffc9f88": {"__data__": {"id_": "fe0c19af-46e7-46d9-8fd6-66508ffc9f88", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a40460-23c1-40da-9886-7a91b4163ebf", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a46eccd532a3ee7913e77454b7c394b94846f3546bbe5c05786956dbabdbe072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e559f16b-b79d-497c-83c3-1040b7290ab2", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e52c36f58e0959a58a31f3a7a24b5e9aaacf63cc4b56423b3cd4f1e3fb680693", "class_name": "RelatedNodeInfo"}}, "text": "New in version 2\\.1\\.\n\nload*labware_from_definition(\\_self*, _definition: 'LabwareDefinition'_, _label: 'Optional\\[str]' \\= None_) \u2192 'Labware'\nLoad a labware onto the module using an inline definition.\n\nParameters:\n\n- **definition** \u2013 The labware definition.\n- **label** (_str_')) \u2013 An optional special name to give the labware. If\n  specified, this is the name the labware will appear\n  as in the run log and the calibration view in the\n  Opentrons app.\n\nReturns:\nThe initialized and loaded labware object.\n\nNew in version 2\\.0\\.\n\n_property_ model*: Union')\\[Literal')\\'magneticModuleV1', 'magneticModuleV2'], [Literal')\\'temperatureModuleV1', 'temperatureModuleV2'], [Literal')\\'thermocyclerModuleV1', 'thermocyclerModuleV2'], [Literal')\\'heaterShakerModuleV1'], [Literal')\\'magneticBlockV1'], [Literal')\\['absorbanceReaderV1']]*\nGet the module\u2019s model identifier.\n\nNew in version 2\\.14\\.\n\nopen*lid(\\_self*) \u2192 'str'\nOpen the lid.\n\nNew in version 2\\.0\\.\n\n_property_ parent*: str')*\nThe name of the slot the module is on.\n\nOn a Flex, this will be like `\"D1\"`. On an OT\\-2, this will be like `\"1\"`.\nSee Deck Slots.\n\nNew in version 2\\.14\\.\n\n_property_ serial_number*: str')*\nGet the module\u2019s unique hardware serial number.\n\nNew in version 2\\.14\\.\n\nset*block_temperature(\\_self*, _temperature: 'float'_, _hold_time_seconds: 'Optional\\[float]' \\= None_, _hold_time_minutes: 'Optional\\[float]' \\= None_, _ramp_rate: 'Optional\\[float]' \\= None_, _block_max_volume: 'Optional\\[float]' \\= None_) \u2192 'None'\nSet the target temperature for the well block, in \u00b0C.\n\nParameters:\n\n- **temperature** \u2013 A value between 4 and 99, representing the target\n  temperature in \u00b0C.\n- **hold_time_minutes** \u2013 The number of minutes to hold, after reaching\n  `temperature`, before proceeding to the\n  next command. If `hold_time_seconds` is also\n  specified, the times are added together.\n- **hold_time_seconds** \u2013 The number of seconds to hold, after reaching\n  `temperature`, before proceeding to the\n  next command. If `hold_time_minutes` is also\n  specified, the times are added together.\n- **block_max_volume** \u2013 The greatest volume of liquid contained in any\n  individual well of the loaded labware, in \u00b5L.\n  If not specified, the default is 25 \u00b5L.\n\nNew in version 2\\.0\\.\n\nset*lid_temperature(\\_self*, _temperature: 'float'_) \u2192 'None'\nSet the target temperature for the heated lid, in \u00b0C.\n\nParameters:\n**temperature** \u2013 A value between 37 and 110, representing the target\ntemperature in \u00b0C.\n\nNew in version 2\\.0\\.\n\n_property_ type*: Union')\\[Literal')\\'magneticModuleType'], [Literal')\\'temperatureModuleType'], [Literal')\\'thermocyclerModuleType'], [Literal')\\'heaterShakerModuleType'], [Literal')\\'magneticBlockType'], [Literal')\\['absorbanceReaderType']]*\nGet the module\u2019s general type identifier.\n\nNew in version 2\\.14\\.", "mimetype": "text/plain", "start_char_idx": 27957, "end_char_idx": 30758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08bcf1d4-3919-4d0d-8c25-64cb6cd0f6ff": {"__data__": {"id_": "08bcf1d4-3919-4d0d-8c25-64cb6cd0f6ff", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "045c8692-adb9-4d07-9f25-d3de0a01baba", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a47e88cbd9eef3664a84e2bd78ed8fa085a79f0bac528e4025c0d4f843134a97", "class_name": "RelatedNodeInfo"}}, "text": "Useful Types\n\n_class_ opentrons.types.Location(_point: Point_, _labware: Union\\'Labware', 'Well', [str'), 'ModuleGeometry', LabwareLike, None'), 'ModuleContext']_)\nA location to target as a motion.\n\nThe location contains a `Point` (in\nPosition Relative to the Deck) and possibly an associated\n`Labware` or `Well` instance.\n\nIt should rarely be constructed directly by the user; rather, it is the\nreturn type of most `Well` accessors like `Well.top()`\nand is passed directly into a method like `InstrumentContext.aspirate()`.\n\nWarning\n\nThe `.labware` attribute of this class is used by the protocol\nAPI internals to, among other things, determine safe heights to retract\nthe instruments to when moving between locations. If constructing an\ninstance of this class manually, be sure to either specify `None` as the\nlabware (so the robot does its worst case retraction) or specify the\ncorrect labware for the `.point` attribute.\n\nWarning\n\nThe `==` operation compares both the position and associated labware.\nIf you only need to compare locations, compare the `.point`\nof each item.\n\nmove(_self_, _point: 'Point'_) \u2192 \"'Location'\"\nAlter the point stored in the location while preserving the labware.\n\nThis returns a new Location and does not alter the current one. It\nshould be used like\n\n```\n>>> loc = Location(Point(1, 1, 1), None)\n>>> new_loc = loc.move(Point(1, 1, 1))\n>>>\n>>> # The new point is the old one plus the given offset.\n>>> assert new_loc.point == Point(2, 2, 2)  # True\n>>>\n>>> # The old point hasn't changed.\n>>> assert loc.point == Point(1, 1, 1)  # True\n\n```\n\n_class_ opentrons.types.Mount(_value_)\nAn enumeration.\n\n_exception_ opentrons.types.PipetteNotAttachedError\nAn error raised if a pipette is accessed that is not attached\n\n_class_ opentrons.types.Point(_x_, _y_, _z_)\n\nx*: float')*\nAlias for field number 0\n\ny*: float')*\nAlias for field number 1\n\nz*: float')*\nAlias for field number 2\n\nopentrons.protocol_api.OFF_DECK\nA special location value, indicating that a labware is not currently on the robot\u2019s deck.\n\nSee The Off\\-Deck Location for details on using `OFF_DECK` with `ProtocolContext.move_labware()`.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2130, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a33c36a6-48b6-48a9-b522-e5205e1c4b8c": {"__data__": {"id_": "a33c36a6-48b6-48a9-b522-e5205e1c4b8c", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0b68f74-cf73-4de3-87e3-80446f9a99d8", "node_type": "1", "metadata": {}, "hash": "e556a9a7dab7a07f4012462fa0f2e6f494aff8fd52718629a990eedabd34bc6a", "class_name": "RelatedNodeInfo"}}, "text": "Executing and Simulating Protocols\n\nopentrons.execute: functions and entrypoint for running protocols\n\nThis module has functions that can be imported to provide protocol\ncontexts for running protocols during interactive sessions like Jupyter or just\nregular python shells. It also provides a console entrypoint for running a\nprotocol from the command line.\n\nopentrons.execute.execute(_protocol_file: Union\\BinaryIO, TextIO]_, _protocol_name: [str')_, _propagate_logs: bool') \\= False_, _log_level: str') \\= 'warning'_, _emit_runlog: Optional\\Callable\\[\\[Union\\[opentrons.legacy_commands.types.DropTipMessage, opentrons.legacy_commands.types.DropTipInDisposalLocationMessage, opentrons.legacy_commands.types.PickUpTipMessage, opentrons.legacy_commands.types.ReturnTipMessage, opentrons.legacy_commands.types.AirGapMessage, opentrons.legacy_commands.types.TouchTipMessage, opentrons.legacy_commands.types.BlowOutMessage, opentrons.legacy_commands.types.BlowOutInDisposalLocationMessage, opentrons.legacy_commands.types.MixMessage, opentrons.legacy_commands.types.TransferMessage, opentrons.legacy_commands.types.DistributeMessage, opentrons.legacy_commands.types.ConsolidateMessage, opentrons.legacy_commands.types.DispenseMessage, opentrons.legacy_commands.types.DispenseInDisposalLocationMessage, opentrons.legacy_commands.types.AspirateMessage, opentrons.legacy_commands.types.HomeMessage, opentrons.legacy_commands.types.HeaterShakerSetTargetTemperatureMessage, opentrons.legacy_commands.types.HeaterShakerWaitForTemperatureMessage, opentrons.legacy_commands.types.HeaterShakerSetAndWaitForShakeSpeedMessage, opentrons.legacy_commands.types.HeaterShakerOpenLabwareLatchMessage, opentrons.legacy_commands.types.HeaterShakerCloseLabwareLatchMessage, opentrons.legacy_commands.types.HeaterShakerDeactivateShakerMessage, opentrons.legacy_commands.types.HeaterShakerDeactivateHeaterMessage, opentrons.legacy_commands.types.ThermocyclerCloseMessage, opentrons.legacy_commands.types.ThermocyclerWaitForLidTempMessage, opentrons.legacy_commands.types.ThermocyclerDeactivateMessage, opentrons.legacy_commands.types.ThermocyclerDeactivateBlockMessage, opentrons.legacy_commands.types.ThermocyclerDeactivateLidMessage, opentrons.legacy_commands.types.ThermocyclerSetLidTempMessage, opentrons.legacy_commands.types.ThermocyclerWaitForTempMessage, opentrons.legacy_commands.types.ThermocyclerWaitForHoldMessage, opentrons.legacy_commands.types.ThermocyclerExecuteProfileMessage, opentrons.legacy_commands.types.ThermocyclerSetBlockTempMessage, opentrons.legacy_commands.types.ThermocyclerOpenMessage, opentrons.legacy_commands.types.TempdeckSetTempMessage, opentrons.legacy_commands.types.TempdeckDeactivateMessage, opentrons.legacy_commands.types.MagdeckEngageMessage, opentrons.legacy_commands.types.MagdeckDisengageMessage, opentrons.legacy_commands.types.MagdeckCalibrateMessage, opentrons.legacy_commands.types.CommentMessage, opentrons.legacy_commands.types.DelayMessage, opentrons.legacy_commands.types.PauseMessage, opentrons.legacy_commands.types.ResumeMessage, opentrons.legacy_commands.types.MoveToMessage, opentrons.legacy_commands.types.MoveToDisposalLocationMessage, opentrons.legacy_commands.types.MoveLabwareMessage]], NoneType]] \\= None_, _custom_labware_paths: Optional\\[List\\[[str')]] \\= None_, _custom_data_paths: Optional\\List\\[[str')]] \\= None_) \u2192 None')\nRun the protocol itself.\n\nThis is a one\\-stop function to run a protocol, whether python or json,\nno matter the api version, from external (i.e. not bound up in other\ninternal server infrastructure) sources.\n\nTo run an opentrons protocol from other places, pass in a file like\nobject as protocol_file; this function either returns (if the run has no\nproblems) or raises an exception.\n\nTo call from the command line use either the autogenerated entrypoint\n`opentrons_execute` or `python -m opentrons.execute`.\n\nParameters:\n\n- **protocol_file** \u2013 The protocol file to execute\n- **protocol_name** \u2013 The name of the protocol file. This is required\n  internally, but it may not be a thing we can get\n  from the protocol_file argument.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4097, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0b68f74-cf73-4de3-87e3-80446f9a99d8": {"__data__": {"id_": "f0b68f74-cf73-4de3-87e3-80446f9a99d8", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a33c36a6-48b6-48a9-b522-e5205e1c4b8c", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "3e864d46c40cd3a4b185d3d6caf47a3c8fe2dc9a4c94965f65075affd0fa36f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f062ef9-2a08-4252-bfea-e3a6fec7ea21", "node_type": "1", "metadata": {}, "hash": "cac41b5bfd9a43a9a4221ca65eafafa0ce89d2be1ec3d657385e2289609e5562", "class_name": "RelatedNodeInfo"}}, "text": "This is a one\\-stop function to run a protocol, whether python or json,\nno matter the api version, from external (i.e. not bound up in other\ninternal server infrastructure) sources.\n\nTo run an opentrons protocol from other places, pass in a file like\nobject as protocol_file; this function either returns (if the run has no\nproblems) or raises an exception.\n\nTo call from the command line use either the autogenerated entrypoint\n`opentrons_execute` or `python -m opentrons.execute`.\n\nParameters:\n\n- **protocol_file** \u2013 The protocol file to execute\n- **protocol_name** \u2013 The name of the protocol file. This is required\n  internally, but it may not be a thing we can get\n  from the protocol_file argument.\n- **propagate_logs** \u2013 Whether this function should allow logs from the\n  Opentrons stack to propagate up to the root handler.\n  This can be useful if you\u2019re integrating this\n  function in a larger application, but most logs that\n  occur during protocol simulation are best associated\n  with the actions in the protocol that cause them.\n  Default: `False`\n- **log_level** \u2013 The level of logs to emit on the command line:\n  `\"debug\"`, `\"info\"`, `\"warning\"`, or `\"error\"`.\n  Defaults to `\"warning\"`.\n- **emit_runlog** \u2013 A callback for printing the run log. If specified, this\n  will be called whenever a command adds an entry to the\n  run log, which can be used for display and progress\n  estimation. If specified, the callback should take a\n  single argument (the name doesn\u2019t matter) which will\n  be a dictionary:\n\n```\n{\n  'name': command_name,\n  'payload': {\n    'text': string_command_text,\n    # The rest of this struct is\n    # command-dependent; see\n    # opentrons.legacy_commands.commands.\n   }\n}\n\n```\n\nNote\n\nIn older software versions, `payload[\"text\"]` was a\nformat string.\nTo get human\\-readable text, you had to do `payload[\"text\"].format(**payload)`.\nDon\u2019t do that anymore. If `payload[\"text\"]` happens to contain any\n`{` or `}` characters, it can confuse `.format()` and cause it to raise a\n`KeyError`.\n\n- **custom_labware_paths** \u2013 A list of directories to search for custom labware.\n  Loads valid labware from these paths and makes them available\n  to the protocol context. If this is `None` (the default), and\n  this function is called on a robot, it will look in the `labware`\n  subdirectory of the Jupyter data directory.\n- **custom_data_paths** \u2013 A list of directories or files to load custom\n  data files from. Ignored if the apiv2 feature\n  flag if not set. Entries may be either files or\n  directories. Specified files and the\n  non\\-recursive contents of specified directories\n  are presented by the protocol context in\n  `ProtocolContext.bundled_data`.\n\nopentrons.execute.get*arguments(\\_parser: argparse.ArgumentParser')*) \u2192 argparse.ArgumentParser')\nGet the argument parser for this module\n\nUseful if you want to use this module as a component of another CLI program\nand want to add its arguments.\n\nParameters:\n**parser** \u2013 A parser to add arguments to.\n\nReturns argparse.ArgumentParser:\nThe parser with arguments added.\n\nopentrons.execute.get*protocol_api(\\_version: Union\\[str'), opentrons.protocols.api_support.types.APIVersion]*, _bundled_labware: Optional\\Dict\\[str, ForwardRef('LabwareDefinitionDict')]] \\= None_, _bundled_data: Optional\\[Dict\\[[str'), bytes')]] \\= None_, _extra_labware: Optional\\Dict\\[str, ForwardRef('LabwareDefinitionDict')]] \\= None_) \u2192 [opentrons.protocol_api.protocol_context.ProtocolContext\nBuild and return a `protocol_api.ProtocolContext`\nconnected to the robot.\n\nThis can be used to run protocols from interactive Python sessions\nsuch as Jupyter or an interpreter on the command line:\n\n```\n>>> from opentrons.execute import get_protocol_api\n>>> protocol = get_protocol_api('2.0')\n>>> instr = protocol.load_instrument('p300_single', 'right')\n>>> instr.home()\n\n```\n\nWhen this function is called, modules and instruments will be recached.\n\nParameters:\n\n- **version** \u2013 The API version to use. This must be lower than\n  `opentrons.protocol_api.MAX_SUPPORTED_VERSION`.", "mimetype": "text/plain", "start_char_idx": 3394, "end_char_idx": 7421, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f062ef9-2a08-4252-bfea-e3a6fec7ea21": {"__data__": {"id_": "6f062ef9-2a08-4252-bfea-e3a6fec7ea21", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0b68f74-cf73-4de3-87e3-80446f9a99d8", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "068930d37db63e0e4a5f8b23bd15cedf2b14bd842c7c16be456d4d406b0fe032", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d38702d2-d706-43ce-8e66-ad161eeafb07", "node_type": "1", "metadata": {}, "hash": "7bb67e8e3eb5560c883fc8866a4354ccb9edde76fd023b5553534427959e0cd8", "class_name": "RelatedNodeInfo"}}, "text": "This can be used to run protocols from interactive Python sessions\nsuch as Jupyter or an interpreter on the command line:\n\n```\n>>> from opentrons.execute import get_protocol_api\n>>> protocol = get_protocol_api('2.0')\n>>> instr = protocol.load_instrument('p300_single', 'right')\n>>> instr.home()\n\n```\n\nWhen this function is called, modules and instruments will be recached.\n\nParameters:\n\n- **version** \u2013 The API version to use. This must be lower than\n  `opentrons.protocol_api.MAX_SUPPORTED_VERSION`.\n  It may be specified either as a string (`'2.0'`) or\n  as a `protocols.types.APIVersion`\n  (`APIVersion(2, 0)`).\n- **bundled_labware** \u2013 If specified, a mapping from labware names to\n  labware definitions for labware to consider in the\n  protocol. Note that if you specify this, \\_only\\_\n  labware in this argument will be allowed in the\n  protocol. This is preparation for a beta feature\n  and is best not used.\n- **bundled_data** \u2013 If specified, a mapping from filenames to contents\n  for data to be available in the protocol from\n  `opentrons.protocol_api.ProtocolContext.bundled_data`.\n- **extra_labware** \u2013 A mapping from labware load names to custom labware definitions.\n  If this is `None` (the default), and this function is called on a robot,\n  it will look for labware in the `labware` subdirectory of the Jupyter\n  data directory.\n\nReturns:\nThe protocol context.\n\nopentrons.execute.main() \u2192 int')\nHandler for command line invocation to run a protocol.\n\nParameters:\n**argv** \u2013 The arguments the program was invoked with; this is usually\n`sys.argv`') but if you want to override that you can.\n\nReturns int:\nA success or failure value suitable for use as a shell\nreturn code passed to `sys.exit`') (0 means success,\nanything else is a kind of failure).\n\nopentrons.simulate: functions and entrypoints for simulating protocols\n\nThis module has functions that provide a console entrypoint for simulating\na protocol from the command line.\n\nopentrons.simulate.allow_bundle() \u2192 bool')\nCheck if bundling is allowed with a special not\\-exposed\\-to\\-the\\-app flag.\n\nReturns `True` if the environment variable\n`OT_API_FF_allowBundleCreation` is `\"1\"`\n\nopentrons.simulate.bundle*from_sim(\\_protocol: opentrons.protocols.types.PythonProtocol*, _context: opentrons.protocol_api.protocol_context.ProtocolContext_) \u2192 opentrons.protocols.types.BundleContents\nFrom a protocol, and the context that has finished simulating that\nprotocol, determine what needs to go in a bundle for the protocol.\n\nopentrons.simulate.format*runlog(\\_runlog: List\\Mapping\\[[str'), Any]]*) \u2192 str')\nFormat a run log (return value of `simulate`) into a\nhuman\\-readable string\n\nParameters:\n**runlog** \u2013 The output of a call to `simulate`\n\nopentrons.simulate.get*arguments(\\_parser: argparse.ArgumentParser')*) \u2192 argparse.ArgumentParser')\nGet the argument parser for this module\n\nUseful if you want to use this module as a component of another CLI program\nand want to add its arguments.\n\nParameters:\n**parser** \u2013 A parser to add arguments to. If not specified, one will be\ncreated.\n\nReturns argparse.ArgumentParser:\nThe parser with arguments added.", "mimetype": "text/plain", "start_char_idx": 6921, "end_char_idx": 10036, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d38702d2-d706-43ce-8e66-ad161eeafb07": {"__data__": {"id_": "d38702d2-d706-43ce-8e66-ad161eeafb07", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f062ef9-2a08-4252-bfea-e3a6fec7ea21", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "7db3fdb5a82b7cfcd40d7d81a33c99b8df1ed5543ca65330172cc7c3a5fd57fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1fae385d-2f54-4dee-b18c-3b31945b956d", "node_type": "1", "metadata": {}, "hash": "5d8b217df25f121fb025185e2d4bc34e07fcf6c3902f7d19e8c352e52b655fd7", "class_name": "RelatedNodeInfo"}}, "text": "opentrons.simulate.format*runlog(\\_runlog: List\\Mapping\\[[str'), Any]]*) \u2192 str')\nFormat a run log (return value of `simulate`) into a\nhuman\\-readable string\n\nParameters:\n**runlog** \u2013 The output of a call to `simulate`\n\nopentrons.simulate.get*arguments(\\_parser: argparse.ArgumentParser')*) \u2192 argparse.ArgumentParser')\nGet the argument parser for this module\n\nUseful if you want to use this module as a component of another CLI program\nand want to add its arguments.\n\nParameters:\n**parser** \u2013 A parser to add arguments to. If not specified, one will be\ncreated.\n\nReturns argparse.ArgumentParser:\nThe parser with arguments added.\n\nopentrons.simulate.get*protocol_api(\\_version: Union\\str, opentrons.protocols.api_support.types.APIVersion], bundled_labware: Optional\\[Dict\\[str, ForwardRef('LabwareDefinitionDict')]] \\= None, bundled_data: Optional\\[Dict\\[str, bytes]] \\= None, extra_labware: Optional\\[Dict\\[str, ForwardRef('LabwareDefinitionDict')]] \\= None, hardware_simulator: Optional\\[opentrons.hardware_control.thread_manager.ThreadManager\\[Union\\[opentrons.hardware_control.protocols.HardwareControlInterface\\[opentrons.hardware_control.robot_calibration.RobotCalibration, opentrons.types.Mount, opentrons.config.types.RobotConfig], opentrons.hardware_control.protocols.FlexHardwareControlInterface\\[opentrons.hardware_control.ot3_calibration.OT3Transforms, Union\\[opentrons.types.Mount, opentrons.hardware_control.types.OT3Mount], opentrons.config.types.OT3Config]]]] \\= None, \\\\\\*, robot_type: Optional\\[Literal\\['OT\\-2', 'Flex']] \\= None, use_virtual_hardware: bool \\= True*) \u2192 [opentrons.protocol_api.protocol_context.ProtocolContext\nBuild and return a `protocol_api.ProtocolContext`\nconnected to Virtual Smoothie.\n\nThis can be used to run protocols from interactive Python sessions\nsuch as Jupyter or an interpreter on the command line:\n\n```\n>>> from opentrons.simulate import get_protocol_api\n>>> protocol = get_protocol_api('2.0')\n>>> instr = protocol.load_instrument('p300_single', 'right')\n>>> instr.home()\n\n```\n\nParameters:\n\n- **version** \u2013 The API version to use. This must be lower than\n  `opentrons.protocol_api.MAX_SUPPORTED_VERSION`.\n  It may be specified either as a string (`'2.0'`) or\n  as a `protocols.types.APIVersion`\n  (`APIVersion(2, 0)`).\n- **bundled_labware** \u2013 If specified, a mapping from labware names to\n  labware definitions for labware to consider in the\n  protocol. Note that if you specify this, \\_only\\_\n  labware in this argument will be allowed in the\n  protocol. This is preparation for a beta feature\n  and is best not used.\n- **bundled_data** \u2013 If specified, a mapping from filenames to contents\n  for data to be available in the protocol from\n  `opentrons.protocol_api.ProtocolContext.bundled_data`.\n- **extra_labware** \u2013 A mapping from labware load names to custom labware definitions.\n  If this is `None` (the default), and this function is called on a robot,\n  it will look for labware in the `labware` subdirectory of the Jupyter\n  data directory.\n- **hardware_simulator** \u2013 If specified, a hardware simulator instance.\n- **robot_type** \u2013 The type of robot to simulate: either `\"Flex\"` or `\"OT-2\"`.\n  If you\u2019re running this function on a robot, the default is the type of that\n  robot. Otherwise, the default is `\"OT-2\"`, for backwards compatibility.\n- **use_virtual_hardware** \u2013 If true, use the protocol engines virtual hardware, if false use the lower level hardware simulator.\n\nReturns:\nThe protocol context.", "mimetype": "text/plain", "start_char_idx": 9409, "end_char_idx": 12870, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fae385d-2f54-4dee-b18c-3b31945b956d": {"__data__": {"id_": "1fae385d-2f54-4dee-b18c-3b31945b956d", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d38702d2-d706-43ce-8e66-ad161eeafb07", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "a743d4008c1555ad62b06cc8c7059fdcec89c464baf51f38dc403dedc06dece0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "465eac93-e005-49d0-8601-0352a21c45ed", "node_type": "1", "metadata": {}, "hash": "896c80059d638be2186bd5ced71d5ea184f065fe9c988af7363a21fd00104939", "class_name": "RelatedNodeInfo"}}, "text": "- **extra_labware** \u2013 A mapping from labware load names to custom labware definitions.\n  If this is `None` (the default), and this function is called on a robot,\n  it will look for labware in the `labware` subdirectory of the Jupyter\n  data directory.\n- **hardware_simulator** \u2013 If specified, a hardware simulator instance.\n- **robot_type** \u2013 The type of robot to simulate: either `\"Flex\"` or `\"OT-2\"`.\n  If you\u2019re running this function on a robot, the default is the type of that\n  robot. Otherwise, the default is `\"OT-2\"`, for backwards compatibility.\n- **use_virtual_hardware** \u2013 If true, use the protocol engines virtual hardware, if false use the lower level hardware simulator.\n\nReturns:\nThe protocol context.\n\nopentrons.simulate.main() \u2192 int')\nRun the simulation\n\nopentrons.simulate.simulate(_protocol_file: Union\\BinaryIO, TextIO]_, _file_name: Optional\\[[str')] \\= None_, _custom_labware_paths: Optional\\List\\[[str')]] \\= None_, _custom_data_paths: Optional\\List\\[[str')]] \\= None_, _propagate_logs: bool') \\= False_, _hardware_simulator_file_path: Optional\\[str')] \\= None_, _duration_estimator: Optional\\opentrons.protocols.duration.estimator.DurationEstimator] \\= None_, _log_level: [str') \\= 'warning'_) \u2192 Tuple\\List\\[Mapping\\[[str'), Any]], Optional\\[opentrons.protocols.types.BundleContents]]\nSimulate the protocol itself.\n\nThis is a one\\-stop function to simulate a protocol, whether python or json,\nno matter the api version, from external (i.e. not bound up in other\ninternal server infrastructure) sources.\n\nTo simulate an opentrons protocol from other places, pass in a file like\nobject as protocol_file; this function either returns (if the simulation\nhas no problems) or raises an exception.\n\nTo call from the command line use either the autogenerated entrypoint\n`opentrons_simulate` (`opentrons_simulate.exe`, on windows) or\n`python -m opentrons.simulate`.\n\nThe return value is the run log, a list of dicts that represent the\ncommands executed by the robot; and either the contents of the protocol\nthat would be required to bundle, or `None`.\n\nEach dict element in the run log has the following keys:\n\n> - `level`: The depth at which this command is nested. If this an\n>   aspirate inside a mix inside a transfer, for instance, it would be 3\\.\n> - `payload`: The command. The human\\-readable run log text is available at\n>   `payload[\"text\"]`. The other keys of `payload` are command\\-dependent;\n>   see `opentrons.legacy_commands`.\n>\n> Note\n>\n> In older software versions, `payload[\"text\"]` was a\n> format string.\n> To get human\\-readable text, you had to do `payload[\"text\"].format(**payload)`.\n> Don\u2019t do that anymore. If `payload[\"text\"]` happens to contain any\n> `{` or `}` characters, it can confuse `.format()` and cause it to raise a\n> `KeyError`.\n>\n> - `logs`: Any log messages that occurred during execution of this\n>   command, as a standard Python `LogRecord`').\n\nParameters:\n\n- **protocol_file** \u2013 The protocol file to simulate.\n- **file_name** \u2013 The name of the file\n- **custom_labware_paths** \u2013 A list of directories to search for custom labware.\n  Loads valid labware from these paths and makes them available\n  to the protocol context. If this is `None` (the default), and\n  this function is called on a robot, it will look in the `labware`\n  subdirectory of the Jupyter data directory.\n- **custom_data_paths** \u2013 A list of directories or files to load custom\n  data files from. Ignored if the apiv2 feature\n  flag if not set. Entries may be either files or\n  directories. Specified files and the\n  non\\-recursive contents of specified directories\n  are presented by the protocol context in\n  `protocol_api.ProtocolContext.bundled_data`.\n- **hardware_simulator_file_path** \u2013 A path to a JSON file defining a\n  hardware simulator.\n- **duration_estimator** \u2013 For internal use only.\n  Optional duration estimator object.", "mimetype": "text/plain", "start_char_idx": 12154, "end_char_idx": 16011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "465eac93-e005-49d0-8601-0352a21c45ed": {"__data__": {"id_": "465eac93-e005-49d0-8601-0352a21c45ed", "embedding": null, "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0b7d054-9b6a-456d-a0f2-129ceb7e8499", "node_type": "4", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "e8bf196484069f5821b9391fca6f5efbbba388a17f96a714a18762270300bc08", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1fae385d-2f54-4dee-b18c-3b31945b956d", "node_type": "1", "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}, "hash": "d9b8cf738542bb99d872d9b004d8df61b7bc8ff0635475d2878bc61f97e0cf46", "class_name": "RelatedNodeInfo"}}, "text": "Loads valid labware from these paths and makes them available\n  to the protocol context. If this is `None` (the default), and\n  this function is called on a robot, it will look in the `labware`\n  subdirectory of the Jupyter data directory.\n- **custom_data_paths** \u2013 A list of directories or files to load custom\n  data files from. Ignored if the apiv2 feature\n  flag if not set. Entries may be either files or\n  directories. Specified files and the\n  non\\-recursive contents of specified directories\n  are presented by the protocol context in\n  `protocol_api.ProtocolContext.bundled_data`.\n- **hardware_simulator_file_path** \u2013 A path to a JSON file defining a\n  hardware simulator.\n- **duration_estimator** \u2013 For internal use only.\n  Optional duration estimator object.\n- **propagate_logs** \u2013 Whether this function should allow logs from the\n  Opentrons stack to propagate up to the root handler.\n  This can be useful if you\u2019re integrating this\n  function in a larger application, but most logs that\n  occur during protocol simulation are best associated\n  with the actions in the protocol that cause them.\n  Default: `False`\n- **log_level** \u2013 The level of logs to capture in the run log:\n  `\"debug\"`, `\"info\"`, `\"warning\"`, or `\"error\"`.\n  Defaults to `\"warning\"`.\n\nReturns:\nA tuple of a run log for user output, and possibly the required\ndata to write to a bundle to bundle this protocol. The bundle is\nonly emitted if bundling is allowed\nand this is an unbundled Protocol API\nv2 python protocol. In other cases it is None.", "mimetype": "text/plain", "start_char_idx": 15242, "end_char_idx": 16767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"72beb569-fa7f-4009-b23c-0fb3773bbc37": {"node_ids": ["54d007e0-a439-4299-a911-d7d93df8f0ad"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "5ac5dd00-55bc-4767-8291-4b198eba6fd9": {"node_ids": ["995cafc5-6e39-43bb-a23b-48d135fc5687", "1a57d68f-bd5e-4b19-ac44-c09f14e5cda0", "507eee74-04d1-421e-8f63-8a7ad4dede7a", "9cd46042-f358-4a40-81c6-18aee50f8df3", "c808470e-fa8e-4aa1-9392-29e5e6d56841", "20d7b474-fffe-481a-a28d-3393a60f7c3d", "0c611f55-b589-4106-a22b-8cc7087cd72c", "aaae4fe6-132e-47cf-8ebf-f923ede94684"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "130dd014-0595-4e8d-bce0-9a555e767c16": {"node_ids": ["4812c02a-deae-4617-a631-3d1d2681ef6d", "cfcb4e69-2296-491c-b649-15e9377ac385", "c94276a9-98a1-4349-84d0-b78b5e8d1b7e", "59145c5f-26e2-4613-8df5-e10874e81f20", "99a604e4-a110-4600-b68b-b11b0ad3538f", "433118a8-4031-4aaf-bbdc-e0965f79997e", "388e0ea2-c70d-4687-b13d-d9ea9f93d6a4", "ee7b7752-6013-4fc6-90c6-cb1559acf82a", "a4c2e637-bf95-40cb-b4de-78de8b49b6b9", "ebe419bd-5a6e-41f3-8c29-1522cbb5495b", "1abdb350-e5f4-4c81-942a-1105d3053d74", "f3b48282-6282-4419-9b67-287f8516f532"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "6e886adb-3bfa-459f-858e-dcd0ae10efb2": {"node_ids": ["55820e72-350c-4d01-97be-cdc60036974a", "3712e73e-6bb3-45fb-87e3-b2539f5ac7ee", "c5a03af5-c467-47c4-96ff-3b15682d23bf", "112f62c0-766e-43c9-ace3-b96969d9fadb"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "3856fcb1-a47f-4a47-9bf2-2f196e6f957b": {"node_ids": ["e39682ef-e478-472e-8f0e-da1ed1b619f8", "4e40803c-97a9-4b13-8bd8-aaa8a7840760"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "54a40460-23c1-40da-9886-7a91b4163ebf": {"node_ids": ["f1cf7a8c-2071-4d9a-a0bb-f6b3664fb968", "527cc4e9-d27e-46b1-9faf-1052b2b76ba0", "33a52153-0b96-43ff-a3fc-bc2546b70869", "56eec31c-5c40-416e-81fd-7c7a6722f005", "3ae87c64-eb04-41c1-ac18-e26b8acfc8a3", "98338da6-5a0a-4653-89be-314b1cc2ff25", "515d7962-e18d-4b3d-8b44-345f171c1de2", "1062af75-9e40-499f-9e34-18c8074da7a8", "e559f16b-b79d-497c-83c3-1040b7290ab2", "fe0c19af-46e7-46d9-8fd6-66508ffc9f88"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "045c8692-adb9-4d07-9f25-d3de0a01baba": {"node_ids": ["08bcf1d4-3919-4d0d-8c25-64cb6cd0f6ff"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}, "b0b7d054-9b6a-456d-a0f2-129ceb7e8499": {"node_ids": ["a33c36a6-48b6-48a9-b522-e5205e1c4b8c", "f0b68f74-cf73-4de3-87e3-80446f9a99d8", "6f062ef9-2a08-4252-bfea-e3a6fec7ea21", "d38702d2-d706-43ce-8e66-ad161eeafb07", "1fae385d-2f54-4dee-b18c-3b31945b956d", "465eac93-e005-49d0-8601-0352a21c45ed"], "metadata": {"file_path": "/Users/elyorkodirov/work/git/opentrons/opentrons-ai-server/api/data/python_api_219_reference.md", "file_name": "python_api_219_reference.md", "file_size": 175413, "creation_date": "2024-08-05", "last_modified_date": "2024-08-05"}}}}